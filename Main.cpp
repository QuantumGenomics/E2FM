#include <iostream>
#include <fstream>
#include <chrono>
#include <stdio.h>
#include "ecrypt-portable.h"
#include <vector>
#include "RandomGenerator.h"
#include "EFMIndex.h"
#include <string>
#include <vector>
#include "Utils.h"
#include "ArrayMTFList.h"

#include "BalancedTreeMTFList.h"
#include "Test.h"
//#include <boost/filesystem.hpp>
#include <boost/algorithm/string.hpp>
#include <algorithm>
#include "EFMCollection.h"
#include "SFMCollection.h"
#include "tinydir.h"
#include "FileBitWriter.h"
#include "FileBitReader.h"
#include "MemoryBitReader.h"

#include <seqan/sequence.h>
#include <seqan/seq_io.h>
#include <cstring>



#include<boost/iostreams/copy.hpp>
#include<boost/iostreams/device/mapped_file.hpp>
#include<boost/iostreams/stream.hpp>

using namespace std;
using namespace sdsl;
/*
u8  encryptionKeys[4][64]{
			{-103,-101,-42,90,63,-117,116,17,-60,49,106,-13,7,-58,-77,79,-56,-104,33,31,43,-23,-106,-123,113,106,-104,-23,29,3,-39,-43,103,-106,-29,-40,-93,57,0,-65,-38,-38,-61,111,-81,-41,21,61,26,20,2,67,82,59,1,42,-53,-30,-43,-58,-22,75,-113,-93},
			{-90,107,96,-68,83,48,19,13,85,108,107,9,-4,49,124,-52,-91,-128,-107,71,-79,97,-13,-123,-85,-18,-121,33,76,-64,-50,-54,-102,82,-25,-12,-61,-55,47,106,98,47,-116,3,-121,-123,-60,95,-117,37,-105,57,-122,-126,-2,-30,109,-13,-117,69,-30,-60,32,127},
			{-62,-15,-87,41,40,-100,-61,60,-109,-103,-68,97,-127,107,-108,89,-110,-113,89,119,-96,-52,22,39,-120,111,44,37,41,-12,-116,86,67,111,12,-47,27,95,-2,59,52,-56,2,-101,-38,-38,61,-72,26,20,114,110,78,-20,-17,60,110,40,123,-120,16,-108,-28,-2},
			{-42,
			-95,
			-112,
			-98,
			-127,
			-31,
			-74,
			11,
			-42,
			-90,
			-20,
			-50,
			110,
			-81,
			-39,
			-100,
			-127,
			8,
			123,
			-22,
			109,
			-72,
			2,
			-9,
			41,
			-108,
			35,
			-5,
			-61,
			-41,
			99,
			0,
			72,
			-12,
			-66,
			-115,
			-55,
			64,
			-94,
			104,
			-71,
			-31,
			112,
			11,
			21,
			-80,
			37,
			-113,
			-20,
			88,
			49,
			-37,
			-7,
			62,
			-106,
			88,
			-112,
			97,
			99,
			-58,
			50,
			21,
			47,
			20}
};*/
/*
 u8  encryptionKeys[168][64]{
			{-103,-101,-42,90,63,-117,116,17,-60,49,106,-13,7,-58,-77,79,-56,-104,33,31,43,-23,-106,-123,113,106,-104,-23,29,3,-39,-43,103,-106,-29,-40,-93,57,0,-65,-38,-38,-61,111,-81,-41,21,61,26,20,2,67,82,59,1,42,-53,-30,-43,-58,-22,75,-113,-93},
			{-90,107,96,-68,83,48,19,13,85,108,107,9,-4,49,124,-52,-91,-128,-107,71,-79,97,-13,-123,-85,-18,-121,33,76,-64,-50,-54,-102,82,-25,-12,-61,-55,47,106,98,47,-116,3,-121,-123,-60,95,-117,37,-105,57,-122,-126,-2,-30,109,-13,-117,69,-30,-60,32,127},
			{-62,-15,-87,41,40,-100,-61,60,-109,-103,-68,97,-127,107,-108,89,-110,-113,89,119,-96,-52,22,39,-120,111,44,37,41,-12,-116,86,67,111,12,-47,27,95,-2,59,52,-56,2,-101,-38,-38,61,-72,26,20,114,110,78,-20,-17,60,110,40,123,-120,16,-108,-28,-2},
			{2,0,-91,80,1,41,-54,-123,-99,-100,83,42,100,75,110,95,30,123,-18,74,126,122,108,77,-109,-4,121,-25,45,-90,-22,-66,-87,26,17,-85,-121,-126,-117,-32,-93,13,-11,7,51,-52,-54,-108,-59,-63,-26,122,-122,-75,25,1,-36,62,26,14,30,0,22,-59},
			{122,-9,111,-86,-113,-23,-61,-66,-67,-89,87,-60,-60,-42,119,83,-103,111,38,60,-18,92,120,122,19,-52,53,-54,-87,91,-74,-87,29,73,-53,121,-82,-6,-43,105,109,-109,-124,120,-117,-82,28,-89,-103,-73,63,16,-78,68,4,-80,10,-89,-84,-26,111,102,-122,51},
			{-28,9,-19,24,-49,-14,91,39,13,52,-83,-16,-115,-48,34,53,-15,-75,-99,-68,-26,83,-18,77,-119,-59,-70,45,43,9,111,-10,-83,-4,-118,50,-87,-32,91,-71,-54,-94,94,-52,25,-61,-66,-56,-128,-54,-46,-3,41,45,-122,-119,-89,86,-12,-115,45,2,-32,43},
			{-3,-97,82,72,-75,56,-83,86,-77,-75,55,124,80,-127,75,-48,-3,-59,88,-117,-120,62,-13,-31,114,24,22,67,119,-99,108,104,-51,-65,-22,63,104,-88,-16,85,-90,-97,44,41,34,-70,-112,4,117,62,79,111,-89,110,127,45,119,-72,-112,-45,15,86,-93,97},
			{21,-81,69,18,11,-123,3,-44,26,95,-74,-94,110,-17,-66,-98,-19,-85,-6,111,65,126,-23,105,102,74,-61,-28,54,-1,54,-44,71,18,-5,-2,-86,122,37,25,66,65,74,-40,-20,17,125,-8,100,-14,88,-47,115,-65,42,-32,-19,99,-37,114,44,48,2,-65},
			{-71,-25,99,94,39,-57,68,7,-37,71,-86,18,110,-52,61,104,2,101,38,-61,-93,90,110,-61,94,-69,18,33,-128,-96,-99,-53,-26,-61,71,12,44,19,119,-60,-72,-38,23,44,112,79,-93,43,127,-8,-126,81,49,40,-125,33,49,14,30,-3,50,-119,-6,81},
			{25,-83,-61,-123,-33,31,83,-24,50,-49,62,103,23,-90,127,106,-67,-61,-98,-106,108,80,-107,108,-90,40,35,-54,-29,-55,-125,96,-38,-7,109,-11,-113,-62,97,-28,102,-73,-21,-120,-26,-28,9,-96,24,-65,49,101,124,-93,10,69,20,-54,6,-53,-7,-38,46,78},
			{-86,-41,52,-96,5,63,-4,-86,-18,-52,-77,46,41,-106,126,-55,-106,43,6,-113,-106,118,-101,-89,91,-17,-33,-68,27,47,83,42,-53,-116,-86,58,123,49,-73,109,72,-88,-50,-6,20,-95,81,-12,43,21,-13,50,44,113,88,81,-51,62,68,-89,-126,-75,-44,-108},
			{-75,64,74,-33,-118,126,1,119,28,124,82,67,-113,106,-106,-87,93,68,-11,127,-48,-22,-11,-30,-111,-55,17,109,-92,14,104,-80,-127,-25,55,-11,-43,118,110,27,76,39,-17,93,-19,-77,59,-66,97,-102,-69,-103,48,-48,-95,5,115,-103,-84,-19,-64,-56,-128,-12},
			{-52,-49,-87,100,-74,62,127,-21,99,-58,28,25,-102,-18,123,15,-124,52,-27,-97,65,126,10,-11,118,-125,-90,118,20,64,-128,110,-12,123,-101,83,-46,18,-62,-66,-17,41,-120,15,105,-127,-73,-77,31,-78,26,-75,-25,-26,88,-109,-93,-40,33,-61,55,-69,86,-118},
			{-48,69,-65,-81,-33,-20,62,-78,37,-77,46,64,27,100,-47,78,-32,96,-101,-19,57,12,86,46,-66,58,-2,94,-116,94,-9,-18,-67,70,99,62,92,-16,-52,-73,-2,-45,102,-86,124,-116,36,-98,71,104,-116,43,97,-84,119,-48,5,70,-26,113,14,20,37,-120},
			{6,63,7,-74,-58,-84,92,27,82,-46,-2,49,127,53,108,127,-125,57,-87,97,-78,-33,-106,6,-5,-126,32,-121,76,-97,-106,-5,27,-44,13,111,-111,68,49,-45,10,-99,92,90,-118,2,77,89,-21,98,-64,72,-27,-124,30,-109,-19,-4,122,107,12,59,-96,44},
			{-85,96,107,-117,-45,-117,-44,-113,-39,72,13,-121,68,-38,-27,35,103,-118,0,-11,30,-25,101,61,99,-107,52,46,41,125,-90,-121,20,119,-78,-14,-19,6,-27,11,93,41,112,112,93,1,-34,-99,52,-64,-71,103,-6,24,-87,-120,112,-109,-32,79,-55,-102,-60,78},
			{-31,-58,-31,-128,-109,0,-92,-36,16,55,-91,-3,-116,-113,-92,65,50,-19,89,-72,52,-99,99,-36,9,87,-44,-125,26,39,124,55,125,27,91,74,-22,-6,-77,87,-112,-32,28,-59,33,-14,-59,9,45,31,-37,-67,15,51,-2,-23,-55,-40,43,69,-42,52,-103,16},
			{87,-7,24,82,-73,-30,96,2,52,-56,53,20,30,-115,82,52,40,-123,125,63,3,109,-3,99,-20,-116,-40,124,111,-60,65,-9,-10,-111,-64,79,-98,88,121,-62,47,127,-39,-123,-39,-102,-76,-75,-55,-59,-52,88,60,-45,-85,127,109,66,-50,6,45,-58,68,0},
			{-105,102,50,-98,19,17,-45,64,-94,-88,109,76,47,85,68,-8,124,80,3,-77,106,-124,-128,40,15,-12,-25,-119,43,-87,102,-12,16,-119,-3,-103,3,-90,55,-82,-125,50,-87,49,83,31,-51,-12,-95,-118,77,101,-14,68,53,-82,96,-91,59,100,90,112,10,-99},
			{-107,57,-69,27,92,-43,-75,-40,91,46,-32,81,-57,-61,72,1,-99,7,21,-83,-31,44,102,-103,97,-25,99,-5,-48,-50,-117,117,-3,69,-105,-55,71,36,77,12,115,60,29,88,-105,-90,-50,78,106,68,43,51,98,-112,-105,-87,122,51,-39,-108,69,17,-60,37},
			{-40,-116,-57,-14,-108,-1,41,-15,-53,65,79,108,-56,80,-48,-109,120,18,44,-49,117,-77,-63,120,-105,-33,52,-80,-126,116,-17,7,-125,11,-87,-26,17,-37,27,-29,-107,49,51,18,50,87,14,5,-95,-2,83,-69,-128,-33,-80,106,31,-10,91,41,71,-110,88,-53},
			{55,-100,-46,-9,-6,-42,-18,69,101,-73,106,119,-100,45,15,16,-100,31,-65,79,-41,-104,74,-64,5,-43,-56,-10,-52,37,64,19,97,83,51,-25,83,-72,-85,-38,118,15,0,-108,-72,43,83,-104,58,-21,64,47,-31,50,-37,42,45,115,125,89,100,12,-84,43},
			{-28,-83,-79,79,0,-92,40,50,-50,-120,63,-51,83,-49,-39,1,118,4,-45,-41,-35,-15,6,67,-5,-38,93,95,-26,-33,-100,25,35,-80,-63,51,65,32,-24,-8,37,8,100,50,85,12,30,42,68,4,108,123,81,-59,35,118,109,40,119,-60,-55,91,-49,117},
			{84,49,-113,-54,76,-118,-65,27,-40,21,-116,39,1,99,49,81,-74,-48,-112,123,28,-88,86,-101,-69,125,3,-2,-56,18,12,121,-99,-27,-95,94,-104,-123,-19,101,20,-56,47,-59,-39,33,-123,61,8,66,57,-42,-101,-99,52,-75,-37,114,-111,53,91,-47,33,52},
			{105,-127,-4,94,104,50,109,55,-110,-26,119,-107,32,103,40,-5,16,-7,-15,-96,6,80,-82,-50,-124,-49,54,103,78,66,-27,-124,52,87,-79,-104,-63,-26,119,-85,68,-12,91,36,-117,32,3,66,-14,35,-53,20,45,79,-93,98,-128,-49,81,110,95,8,-100,35},
			{116,-34,66,-74,68,20,-109,125,76,71,-16,93,-123,-49,-22,109,82,-124,98,-12,-16,-91,-27,123,6,-8,-85,72,61,86,28,110,53,7,-91,-41,36,50,110,82,-78,57,33,-126,74,76,-99,-69,-17,41,-39,48,66,-39,-94,64,38,88,-16,20,-8,24,62,84},
			{-53,38,-36,68,7,-126,-46,-67,40,109,78,-61,41,0,-125,83,102,69,-41,43,72,-6,56,118,51,76,-51,113,110,-42,-62,-120,-110,-91,-115,24,-69,93,116,-79,-122,108,78,-91,-50,-30,81,-1,-30,116,-26,73,66,66,117,58,4,-27,41,84,100,93,-57,90},
			{-74,-101,-6,-88,-34,-81,-124,9,55,-27,98,44,53,-98,74,-39,91,-110,-40,54,46,9,28,60,53,-118,-42,-52,-72,14,-115,-82,-67,-104,-21,103,0,51,5,-78,97,30,-41,7,-21,-39,125,-120,-20,75,72,29,58,124,93,-67,104,126,47,-28,-94,8,64,113},
			{90,28,-5,-69,6,-65,45,7,9,17,-120,48,-80,-35,-21,-61,93,-90,-65,-106,-121,75,-40,1,87,100,-62,-44,98,-59,-124,109,84,106,38,-40,-73,23,102,-54,-104,83,64,-43,84,-8,34,-85,-17,59,-73,-2,30,0,-111,105,31,41,14,106,-13,78,-18,-92},
			{-8,25,3,-15,-73,76,-28,28,-43,-13,-13,-47,-69,-6,-43,96,81,6,15,21,106,111,48,-68,-100,-32,114,27,-111,87,103,-82,-114,-24,84,-105,-32,-48,92,-58,96,-14,17,72,-3,-7,-51,118,81,50,119,-128,-3,-78,-2,38,61,-83,3,-79,-106,106,19,-2},
			{-23,75,-75,50,118,-106,124,86,22,-17,-54,77,-7,99,-91,81,-26,31,-92,121,68,-39,-128,-10,-65,-13,35,109,125,2,-93,-76,-122,-103,-91,-27,99,-115,69,19,120,42,-80,-86,9,93,123,55,-57,-40,5,-53,-113,-94,24,107,-56,-70,108,-40,81,-115,75,92},
			{79,-76,104,-38,76,85,-111,1,51,-78,39,-116,126,-71,-119,96,102,30,36,9,-128,81,2,-127,87,-44,-40,-119,45,49,-77,-95,-123,-28,-61,-113,-125,-34,57,73,106,59,45,-4,94,-96,-30,35,-35,46,84,-83,-57,55,-102,-45,-42,-93,126,77,-110,-40,62,-101},
			{-10,36,20,40,62,-77,57,14,15,-56,122,95,33,-72,-34,-9,-92,115,-52,44,-79,-33,126,25,82,-121,-74,-58,-116,-80,-55,-31,35,-51,-10,-28,-115,-96,-47,116,-5,82,35,-50,-48,49,-11,28,45,-114,15,27,-107,-47,-114,-116,33,119,93,-72,-24,-30,97,-60},
			{22,-42,-16,-39,64,60,-126,-11,78,72,5,62,82,63,53,-5,-8,63,-33,21,91,-57,-80,85,64,-96,108,40,25,115,-90,-42,46,48,-121,99,-39,-72,43,48,-117,-126,3,90,-23,43,-73,58,32,-39,-38,68,0,66,91,116,82,95,-61,94,-108,-38,72,-11},
			{100,22,109,-104,12,-20,-96,-110,72,-110,-73,-69,-90,89,-73,-127,109,117,26,45,-25,29,75,-86,-27,-90,67,115,92,-18,66,69,-95,85,117,40,-56,55,-45,117,-67,-6,-12,-16,-83,33,63,7,41,-85,-56,103,-7,-55,-33,-8,41,92,82,-14,9,11,-106,-106},
			{97,-104,-26,28,-7,-2,-50,31,-95,58,-127,96,75,-95,-11,12,-55,-44,8,44,117,78,51,115,67,-3,99,-102,-68,124,-61,-98,-73,-64,-5,-82,63,-71,113,-122,105,-127,108,93,38,-50,-63,-93,71,1,-84,125,-37,-126,-122,38,69,33,-30,47,-102,88,-75,94},
			{100,0,117,110,-82,-69,20,71,113,-70,103,74,68,-30,116,123,-120,-51,19,105,39,26,46,19,-85,102,77,-59,-99,-19,-96,9,-56,-122,22,103,94,105,65,-37,70,3,24,18,-75,97,46,-104,120,-89,-83,24,-75,45,98,105,98,-63,88,58,-127,124,43,-111},
			{-123,74,-109,116,-65,73,84,-86,90,-115,-101,-43,44,2,-4,30,100,-119,-128,112,24,20,-103,-100,56,-20,20,-53,-93,94,-46,-41,52,-125,84,25,97,-44,-68,55,-119,-47,-127,-120,-23,126,93,-102,-83,-70,-81,65,-27,107,94,94,14,7,-104,-50,-123,4,-75,-68},
			{-69,-46,-13,75,-29,-19,-27,97,105,-38,81,-63,-69,83,-75,-122,79,-126,68,47,57,48,-111,-120,1,45,-73,57,-9,-114,50,65,60,-124,21,-110,106,-119,-109,44,2,-95,63,4,-112,-127,-107,126,97,-4,108,-112,-53,61,-50,-46,-20,-19,-121,-119,106,-38,102,-41},
			{52,-91,-103,-39,40,74,11,97,117,127,-32,104,-61,52,-126,115,82,109,111,43,-35,-35,-80,70,-1,-2,-118,3,-12,-104,27,-92,58,-57,13,93,-73,-69,122,-75,-41,-24,-14,-9,73,-69,23,85,49,94,28,84,44,25,70,47,115,52,-89,71,-35,99,-96,48},
			{23,-122,-47,-8,54,31,79,85,20,99,-89,-44,-109,19,91,127,-110,74,73,-68,64,-96,80,35,101,123,2,114,-26,22,-29,-126,50,-32,119,-75,-86,3,-12,35,12,77,47,31,-81,113,-52,96,-7,68,-7,-101,54,-79,-69,110,-2,48,-93,111,94,-108,6,-114},
			{120,-32,-50,-102,-66,-84,-31,17,-32,122,-123,86,-122,91,-119,110,-12,-41,108,18,99,-94,1,64,-23,-76,-78,50,124,1,126,-64,1,-90,13,14,-99,119,91,-14,61,-59,117,103,-99,-56,-100,3,116,6,19,-117,35,-40,-110,97,-122,-4,-94,-88,-11,71,45,53},
			{-105,-85,65,-59,-95,-107,-90,4,118,-101,84,7,36,-75,33,62,-98,-103,71,-108,-54,125,113,93,-102,-36,91,29,-42,29,-21,58,-9,53,100,22,-81,119,-54,44,-31,1,-69,57,-44,9,48,-18,23,-68,-23,-39,37,-86,70,-125,-32,-37,-66,11,33,67,105,92},
			{62,23,93,125,79,44,-61,49,53,-126,52,58,-106,-63,-14,-93,32,-55,-74,30,-124,-79,-84,-64,71,79,2,-107,103,-12,47,-25,-72,-45,21,-8,98,103,94,-59,94,92,60,41,-119,-80,-29,-42,50,-49,-99,117,-38,-49,60,-113,-60,120,-69,65,-60,42,-60,26},
			{7,117,96,-20,84,117,83,82,57,9,41,32,39,59,-117,-96,-5,101,-58,-43,58,114,-77,-114,106,9,42,-108,27,55,-86,119,-52,20,-122,22,-113,-46,-117,9,-112,104,44,33,33,71,83,-23,121,-92,77,-60,84,-59,-74,-41,4,-37,63,-68,-36,-8,-63,-28},
			{106,21,22,19,59,24,-104,3,-71,110,13,-51,-82,-81,18,-52,1,-126,-111,52,-98,-67,89,-49,-43,63,-68,42,36,125,24,65,-11,84,123,0,126,-74,-110,-128,-101,-12,-93,-82,-36,46,-52,17,20,101,-15,18,-31,48,-30,41,118,-97,-75,32,7,-101,-92,-29},
			{46,21,47,-84,-46,71,-38,-22,67,-34,-3,-109,11,-5,-8,-122,55,-96,66,-37,-28,-102,92,127,93,-1,93,79,84,117,115,-85,-14,-11,-23,54,-93,7,94,36,127,41,-66,127,37,-88,-38,68,17,0,11,-60,96,-97,-98,-110,-82,-31,-23,85,34,79,-4,-67},
			{63,-11,119,-82,116,-38,-6,16,107,34,55,29,-27,-72,121,-7,-70,23,10,44,105,-100,-89,-29,-62,117,-3,19,-59,-28,114,-30,123,-41,64,51,66,109,72,-48,-54,-117,25,-115,2,-31,-32,54,64,0,-82,36,17,-100,28,12,-43,-24,-38,-106,-74,-102,-100,62},
			{-46,-94,48,-108,69,15,-62,54,-84,38,92,-50,105,65,60,95,-55,125,73,-111,-16,-51,118,122,-108,107,64,-112,-94,-23,-101,-122,-78,-112,-102,-71,-71,105,-27,102,123,91,118,43,43,72,8,35,-29,71,29,12,72,-123,-119,57,-103,30,97,84,-22,-93,-90,43},
			{115,107,-118,13,25,126,-80,54,-9,79,-58,-107,-68,-54,-61,72,-126,21,11,111,-34,114,108,-112,72,-34,-4,-80,-54,36,-126,-64,-19,-52,85,-110,-71,102,33,124,-65,-1,-127,116,-108,-15,-66,-85,10,32,-73,-29,63,-37,65,23,-64,31,120,-69,-2,-76,-124,-121},
			{-97,-76,6,-59,46,-28,13,-76,108,107,-8,-86,6,-24,-106,-83,-98,75,78,42,-57,-18,-65,115,-50,-124,23,100,40,43,93,-80,11,-46,-55,73,15,-4,88,-4,119,73,-61,64,52,32,-13,-62,-11,-128,-58,-80,94,120,19,-74,-105,-16,0,-54,-39,-18,-66,-76},
			{21,-42,47,24,90,49,5,-79,-16,103,91,-72,-126,55,121,-41,-26,55,2,0,-58,79,17,-72,-102,9,121,121,33,-96,-104,78,-126,-90,88,-36,109,-76,-16,62,-30,89,-64,40,6,45,109,-61,67,-76,95,-64,109,32,48,107,-96,53,-49,-113,55,108,91,-33},
			{-5,100,-12,38,-58,64,-69,84,-67,-11,-48,17,-24,-2,-76,-49,52,83,19,-35,-89,23,-103,-96,108,-15,47,-114,-29,2,124,90,107,-76,-44,91,-24,-105,16,-25,-93,48,111,-46,-72,24,-61,-56,57,-85,-99,-85,-123,54,15,-101,-12,-9,83,33,107,-35,-14,-89},
			{26,-97,-60,-70,-57,53,103,1,56,-96,69,123,38,-88,105,-90,113,31,-48,-32,-102,-73,93,91,-77,-86,-26,-10,-96,44,-28,105,-109,125,109,-13,116,61,58,-94,55,20,36,69,-108,-121,-67,-111,126,-116,-18,68,124,-74,-117,20,3,45,-27,-59,-9,-51,-86,99},
			{-82,57,34,-59,-2,-85,-118,78,-96,-51,-117,-73,-74,34,32,-117,61,96,-83,-74,-54,-88,-118,90,-113,64,-102,18,-31,106,-43,56,24,-111,-3,-16,80,-23,16,95,-75,-54,71,28,-93,-10,8,-9,124,114,-26,-61,45,-86,-90,73,-38,72,-58,-82,-83,-31,-10,48},
			{-107,-21,30,-14,-60,-104,-97,12,-27,34,106,-100,-1,-18,-34,-125,-15,-73,111,27,-109,-54,99,-110,-22,80,107,27,121,-125,-64,-66,47,26,81,17,105,-61,-109,27,-92,-53,62,-70,-37,-31,84,72,-57,67,-125,-14,62,-65,-120,101,-13,-46,25,-29,29,-15,-37,92},
			{-3,-27,0,-96,77,33,94,121,-73,-35,124,-121,113,84,95,-96,69,20,67,-18,-41,19,1,112,-110,61,-43,0,-58,0,9,-33,-36,7,-23,61,14,-65,43,39,104,95,-111,17,39,-41,27,-52,-125,-66,73,-13,118,72,76,101,-95,122,15,-81,57,25,-5,21},
			{-115,-9,91,58,-86,-109,-4,98,64,-88,12,66,-86,-18,40,-28,125,40,-87,93,91,-126,126,-108,23,-97,3,-13,37,-111,1,38,25,-77,108,60,96,37,-108,25,-42,-34,106,72,20,-10,-33,60,97,-110,-80,-110,56,118,75,-59,91,-19,9,-44,-32,41,3,-35},
			{-58,111,-17,102,119,52,62,63,-55,96,102,77,-59,-117,-33,-41,-26,86,-32,-64,-87,24,-58,36,-110,106,-42,9,-34,111,18,87,109,38,102,-35,-70,-21,-93,113,43,105,62,113,-30,112,121,-54,-112,-72,-82,94,-56,90,-111,17,-79,-126,-73,76,60,-86,2,-80},
			{111,97,-67,112,-97,-55,-88,-115,-30,48,-82,-47,47,79,-83,103,123,-127,23,104,32,54,11,-45,83,-81,85,-94,-73,-34,58,66,-16,-21,-114,17,20,0,105,-73,-88,5,-111,115,32,27,0,48,-101,-47,-98,85,9,-122,3,40,-9,-26,-46,-62,-43,-91,-49,-30},
			{-30,56,44,25,-95,60,-100,-64,-66,-127,-50,-120,31,-89,-87,-101,-126,45,53,27,46,-91,107,-10,-70,111,81,119,-74,88,-73,-35,94,-112,86,-25,-46,72,-64,-112,-98,91,-54,14,-108,127,-108,48,7,94,15,-122,-108,-94,62,2,41,-40,82,73,104,76,-47,41},
			{-21,0,21,110,101,-44,36,-104,5,60,43,23,-84,-47,-77,-97,-66,-2,-114,42,-13,-112,94,-99,92,54,7,12,-34,-97,-115,108,87,29,45,115,-28,-117,21,-14,47,-114,24,-61,121,-57,-88,-77,34,124,26,-100,5,66,56,-3,-44,-103,54,-89,-39,14,2,-97},
			{28,9,-74,-35,-56,19,104,-61,56,-22,-36,77,-71,9,72,-24,-11,-103,-15,-95,26,-98,87,-37,87,27,79,-23,35,76,104,36,-77,75,77,35,-117,-100,22,-74,-83,-70,127,7,100,-28,83,125,102,18,-38,-68,48,-101,85,19,-96,-125,-93,3,-78,3,91,-119},
			{-89,105,-10,27,-40,120,58,68,82,126,82,69,65,82,54,-68,-74,9,-103,-105,50,-38,-90,-31,94,104,8,42,-119,107,31,-121,-71,78,93,-53,67,-64,92,78,-108,-83,78,99,104,-42,45,50,-19,35,83,-104,5,-70,53,-75,-69,68,-112,39,-73,68,31,80},
			{65,-108,-10,35,-67,-6,-62,-59,103,-58,-8,-44,92,-2,-17,-44,29,21,23,77,113,50,91,1,-124,52,80,-81,103,-25,23,122,-21,-46,37,109,-93,-75,-33,-37,124,50,120,-11,69,-112,-76,39,-119,113,14,-40,-47,95,78,59,-40,11,-72,-47,127,-120,23,99},
			{71,73,75,54,43,-71,91,-120,-96,-80,106,92,-59,-98,-59,-44,95,10,-98,-59,-44,119,103,-54,97,48,83,56,-105,32,-3,-5,-11,9,25,52,-19,-87,-87,-99,-114,-35,-27,42,88,-43,75,-121,-124,104,26,97,-87,-31,1,9,12,13,23,29,90,-105,73,106},
			{-2,-54,105,28,57,111,15,-55,-31,5,68,-68,124,-118,-30,-33,-83,-34,-123,-21,113,42,78,-119,115,-68,-64,73,35,-90,25,67,-70,118,-47,-53,-74,-47,92,69,-79,-23,66,-114,70,6,-9,-93,-46,54,-99,-89,-45,-50,-26,76,-91,-72,-108,79,-69,-34,110,-114},
			{-22,-24,-81,-5,-113,-49,-59,-17,-57,-50,-127,15,-26,-6,-55,-51,-114,94,-43,-57,-117,-77,-17,59,-106,-72,120,6,115,-53,57,38,-121,-12,31,24,108,-15,-2,-8,70,-110,-95,-124,-26,27,-71,-33,-9,78,-90,24,74,-111,24,-113,-33,78,45,-9,86,39,106,-27},
			{15,-24,105,32,81,-71,-94,-86,83,107,89,16,86,13,4,41,-123,-24,-62,-92,-42,111,-55,-101,49,-55,60,7,-1,-62,-97,-67,-70,-71,56,61,30,84,-99,117,-52,-76,109,32,-51,-57,50,126,-37,29,-72,-56,44,-127,97,-85,4,-1,14,84,-105,120,44,7},
			{82,86,-123,-78,2,-87,-5,30,3,-108,9,123,18,50,-94,-95,50,-12,-117,79,16,-120,-43,-122,55,119,9,-109,-32,60,2,127,-5,91,-99,55,-112,79,60,3,-91,61,61,53,-28,-48,38,-49,114,-82,19,-27,-102,-19,-54,-15,-98,-98,-123,-4,109,47,58,-3},
			{-46,-15,100,-14,-87,-58,71,45,45,-11,17,72,-75,108,70,103,88,91,-95,63,-28,-112,18,17,-21,-3,105,28,33,-90,-50,100,87,18,-91,-75,-5,11,104,-37,89,-54,-13,124,97,93,106,86,-65,62,-92,55,-65,-10,-38,-75,81,52,-27,114,-96,-117,15,63},
			{88,126,-123,60,114,-123,41,-80,-118,-111,100,75,-74,109,-115,-120,-78,-71,29,-42,8,-56,12,-2,-127,27,63,119,69,-55,-121,10,99,35,12,117,15,-24,-7,-1,45,49,78,60,-23,-95,-39,115,-126,-64,36,-21,-32,19,8,56,-48,-73,-74,-46,-124,95,-40,-73},
			{-90,57,-39,94,106,77,111,127,56,-47,-72,76,-53,22,39,78,58,-34,-14,-35,126,-42,-94,0,-29,-128,4,-30,31,103,35,48,-77,65,116,-13,-124,-108,71,48,-119,27,-73,56,-75,94,35,19,-108,-81,-68,-1,78,-66,-7,-89,7,68,120,-8,124,81,-109,-20},
			{-7,3,-50,-70,24,71,-32,-32,-26,26,-55,-7,101,85,-15,114,113,25,-20,32,-49,43,86,77,51,122,-64,14,-112,95,58,-113,-39,-43,10,-57,121,82,-60,-95,98,62,-5,-91,116,-52,-80,-83,-107,119,96,44,-8,101,84,-29,-103,-88,-43,-29,75,-40,7,103},
			{-79,-90,-27,-59,-47,80,-62,-16,-88,44,109,73,-123,50,-15,-69,104,-46,33,-111,-23,-5,53,-20,106,25,9,119,46,111,-128,90,75,-116,-122,91,-87,-101,42,-121,-71,-103,88,-119,21,36,-37,64,-74,-27,112,82,48,64,102,66,-17,66,87,-86,31,-66,-97,-7},
			{-44,-99,-103,17,-9,68,77,-68,0,-11,107,-123,93,-36,-30,-11,88,53,43,-6,-127,5,-15,-72,-62,-80,112,-22,-68,44,-41,-70,93,61,-124,59,-115,-74,87,106,99,2,-98,93,27,-22,-29,16,73,-117,-67,4,-32,35,5,52,40,-95,125,-118,91,29,-34,-63},
			{-41,117,28,44,118,-18,-10,-9,-58,-83,75,103,-63,-12,59,67,2,-103,-22,102,-76,-9,94,105,-32,109,-111,-61,-109,-42,79,-122,113,85,99,71,40,69,19,53,91,54,-127,-123,107,-73,-93,-16,120,23,97,-30,-68,-70,-14,-115,8,-45,113,-6,-68,-54,17,-126},
			{86,-6,108,55,29,-49,-41,5,42,51,27,82,-94,18,-110,118,-14,59,-58,-97,-116,119,113,98,-91,-6,-88,-79,64,5,5,-10,-48,118,-28,-126,27,-25,-41,93,-122,-28,70,41,1,-13,41,45,69,-17,102,34,112,-32,-28,12,-110,-116,-42,74,43,-28,-14,62},
			{7,85,78,-46,50,-112,58,-86,107,91,-76,91,91,104,14,74,24,94,64,-96,33,57,-105,29,106,-92,-111,-60,76,63,-60,-1,-26,31,-65,-1,61,46,10,-11,-42,-81,-44,-102,-6,-32,88,35,-57,64,-59,-119,85,-121,-42,-53,30,-8,-57,28,-66,-20,62,-32},
			{101,77,80,-11,-12,-76,-82,-17,-66,42,-80,-1,-122,-3,-72,-12,75,71,-7,-20,45,73,-86,107,-91,87,-68,24,86,-45,2,-30,-90,-90,-104,-116,36,-82,105,71,-27,57,18,53,-52,-96,98,73,30,7,105,107,116,-43,-31,5,-118,45,36,-123,-115,107,-3,16},
			{-107,10,27,83,-71,-114,-46,-6,-13,-94,-8,94,46,104,25,-88,118,-116,44,-67,-72,-56,30,7,-19,56,-86,-39,116,54,31,-69,-39,-67,91,25,-39,33,-56,-70,98,21,27,-60,49,-37,-30,36,121,-65,-6,52,101,-27,68,-23,-92,103,-50,-32,101,-111,37,87},
			{-92,-94,-5,-44,-128,127,-95,-2,-18,-32,-36,-78,127,106,-116,119,-117,20,126,28,116,-38,125,5,62,84,59,74,120,42,-88,38,45,1,-23,105,-62,6,104,-43,-79,-98,-107,69,-84,60,113,19,110,123,126,47,-87,-60,4,16,-81,89,110,-72,70,66,98,38},
			{-89,39,-37,56,-84,-29,-60,-50,112,6,68,-119,-110,-21,49,34,-50,5,75,25,8,-18,117,-27,-98,100,-53,9,85,72,-114,41,-35,-64,25,-79,108,113,85,-110,37,-35,60,47,-23,-73,80,-118,34,-41,-108,-74,-63,-73,-24,103,95,32,31,-80,70,115,-30,-46},
			{121,124,-125,77,-72,77,103,-53,28,125,-93,-55,-75,-4,-102,47,56,7,-22,39,-106,12,-83,62,-24,-11,-102,77,-16,78,-23,-87,30,-124,-7,61,66,31,42,-123,-21,22,-54,-101,-100,65,-11,101,-87,116,-82,-88,-11,-53,121,27,-28,-54,55,-37,-32,-21,77,-96},
			{5,7,111,36,-103,-53,-59,55,-57,-93,40,70,77,60,-111,-74,85,20,-119,-20,-4,33,77,-35,6,-21,-126,95,11,-30,77,-103,-35,-52,125,-39,-127,-113,-101,76,117,-83,12,106,55,-106,28,103,26,53,-11,59,-37,45,-120,-111,85,-27,126,-119,93,-53,-49,17},
			{67,50,-113,-71,-82,116,-35,105,-96,-125,-27,-94,101,-23,31,-85,-31,-62,36,107,-107,89,-33,-107,-1,125,-59,69,72,12,-81,20,-7,-92,18,-35,-68,-44,64,85,-42,80,-56,-35,101,104,57,127,-45,-111,-27,-40,23,-7,-32,-20,-6,113,85,93,37,-45,36,-40},
			{-124,-115,-103,82,-42,-99,-9,99,-65,-43,-112,-72,-30,93,117,99,-5,59,99,-1,-4,-49,88,121,48,63,-62,97,-77,106,76,57,61,107,78,-77,39,48,60,-35,51,-3,109,2,-102,68,14,100,85,38,11,-29,-35,-71,32,-24,-97,-12,-27,109,13,121,-32,-43},
			{16,-111,-120,47,127,-48,-5,111,-111,-61,16,33,-84,-128,-107,40,-33,-87,-30,100,-65,-69,-29,-103,53,71,-49,-62,-119,110,-123,-103,102,-87,20,105,78,93,-64,-72,-3,-106,51,-61,-41,-43,113,-87,-90,16,-35,-20,-14,58,-49,19,111,118,-97,-43,-84,33,-28,116},
			{-110,-25,59,-1,-31,-93,-108,125,-77,-58,-32,-118,-122,-37,-77,-116,14,-119,-123,32,-18,-57,126,-103,3,112,-1,-82,-4,-36,-126,-18,-118,-103,81,104,-107,66,22,80,79,70,18,-119,104,-57,74,-29,-48,-127,-32,82,-34,56,-117,-50,-90,-3,65,-3,120,51,-83,-50},
			{-17,-3,-43,81,65,-51,121,-38,37,37,-48,-70,93,2,-12,103,-53,54,-46,25,60,-70,75,-28,60,125,33,-36,-61,-120,79,-6,53,-32,-39,-75,-49,43,-113,39,-89,2,8,-25,5,66,-81,36,-117,70,-107,77,88,-78,64,-83,-36,107,94,-70,98,82,89,23},
			{-75,97,64,92,8,-72,52,119,37,58,-66,23,-21,-13,-31,105,-105,15,90,-23,46,-89,84,-17,52,-46,-56,81,83,25,69,97,-84,-58,-85,-118,109,40,-10,-9,22,-20,13,115,25,92,39,-95,117,-97,33,-113,31,-68,125,-101,95,117,-51,-23,83,58,-16,60},
			{71,110,-101,-102,53,48,-20,-71,87,-98,113,42,50,39,89,-96,-83,69,-125,103,-100,57,-5,42,65,56,-110,20,-9,-115,-103,-72,36,-78,27,60,-28,8,21,-86,46,34,85,-50,65,61,77,80,-94,-117,-15,-50,-85,-66,-56,9,-121,86,-61,13,-62,-19,46,-119},
			{57,48,70,121,-46,43,-102,65,84,99,-41,80,-18,-5,-103,-56,84,-39,-108,114,-114,123,78,-63,78,-2,-45,26,-67,-112,124,-31,71,32,-71,-110,5,-97,-101,97,23,44,-19,-52,-55,57,60,-36,-41,-2,8,-66,117,40,-51,-122,-107,-15,-94,-81,81,-21,5,117},
			{4,47,82,96,-109,-86,-16,17,-6,6,-8,57,56,95,117,-42,-26,18,77,-14,-43,17,-23,-111,78,0,-82,-102,-9,-97,123,-42,116,-24,-15,113,103,49,40,74,-76,-96,42,-79,117,-3,-38,-2,-12,-48,-93,118,-57,-106,-40,69,102,-82,-56,-56,-123,-19,85,8},
			{-28,93,112,-57,-121,122,48,6,-113,-67,-118,-116,56,78,-43,27,51,-123,87,84,60,-18,108,64,68,18,-112,51,55,120,-108,-74,-84,48,117,-5,74,-109,-16,32,103,-39,16,80,103,-111,62,-123,-110,101,-79,-111,-76,-54,11,-121,-23,61,-48,18,-1,4,124,-47},
			{-8,-107,-74,-47,109,90,82,76,-75,109,84,52,-79,-47,18,50,-24,69,16,-16,-72,-32,120,75,70,-60,15,-52,-89,-7,-60,-14,-56,-113,33,56,121,42,-62,123,27,-61,-79,87,19,11,78,-19,-6,33,60,91,68,-53,92,-52,30,-91,-55,-61,-106,-44,68,-69},
			{-80,72,31,-68,-50,-69,83,112,64,-111,27,-44,23,94,86,-81,83,78,-63,-40,-90,102,42,77,30,16,-35,57,118,-21,83,2,75,33,30,65,69,-109,-17,-17,110,94,-59,-55,84,-34,108,-77,36,38,41,-107,-88,-90,6,92,-19,-80,77,70,63,86,-20,-1},
			{-100,101,119,-51,56,30,12,-102,93,108,-66,-67,60,98,119,-62,30,53,-34,-32,-119,-71,80,72,90,-116,-93,-63,36,35,84,117,121,-1,13,-87,-94,37,49,-25,60,118,-104,-2,-82,49,18,44,4,-90,57,-60,-47,16,-63,-24,-56,-43,55,-115,113,108,-92,66},
			{90,84,67,-120,-118,99,-15,-49,98,57,-40,73,-89,70,0,84,47,-20,44,20,-78,-59,-36,-43,92,-32,-29,77,-93,12,104,-59,-13,49,-92,-52,123,106,-70,18,-6,-83,-43,-57,-47,-18,-49,-114,-66,74,16,-1,36,-71,-49,-25,-55,90,-95,-36,-50,99,-56,-40},
			{44,-118,123,-102,100,-37,10,-100,-57,6,83,-37,23,-5,103,-35,95,35,35,117,33,44,38,-54,-42,104,-116,96,-26,-29,-93,32,65,-121,92,23,-110,74,8,17,-106,65,79,125,-114,9,-35,38,31,-89,-4,-93,70,-109,91,-70,-35,-56,-11,69,-77,116,-34,-124},
			{-88,-13,-117,86,-61,-76,-20,-36,38,-27,-125,-124,-43,-94,-76,83,-128,73,99,-47,123,-8,35,-116,-104,31,24,-19,-91,-109,56,105,-101,51,39,-72,66,46,25,-124,-57,-71,-54,-65,111,29,-113,66,-6,-35,101,45,89,127,-120,-93,75,-97,-125,30,125,90,-99,51},
			{-75,43,118,125,100,75,-113,-72,-82,-107,-125,58,102,10,-24,74,3,43,117,-50,-44,71,-102,-120,99,-118,-35,-7,97,-86,37,-28,-51,118,-11,101,81,-33,105,-67,-96,61,-119,4,35,-54,-38,56,21,104,120,-117,-14,-60,4,79,-106,108,-6,-127,43,34,100,119},
			{20,-83,-107,26,69,11,7,50,40,-45,-75,-73,-47,-91,-30,-99,7,0,-30,60,84,52,114,57,104,102,33,115,-126,22,115,33,42,-77,53,-60,-126,-94,63,59,-70,-26,65,-37,-98,-110,-75,-123,-99,-45,-39,-74,-125,76,-49,66,-28,33,56,-15,-50,112,111,65},
			{106,-74,9,-88,86,-100,-25,-76,-20,-78,-114,4,-54,14,70,-45,13,25,115,69,-107,0,77,-79,-34,-111,-119,10,120,13,-94,124,76,-103,-125,-106,-3,-86,30,95,22,119,86,-40,16,-70,-64,21,74,-78,-68,-64,-52,-69,105,37,111,-91,37,-32,-32,54,53,-53},
			{-75,96,80,57,-26,114,48,16,63,118,23,24,-77,123,98,63,-120,-53,-109,-18,-108,56,-38,-18,80,-53,5,125,-42,-57,-116,-75,90,-88,-38,95,-69,16,29,76,-72,98,-122,68,13,12,-65,59,-128,78,-124,38,-126,-96,-64,15,83,11,-108,-35,118,-30,26,-117},
			{15,-32,-99,33,-48,-63,32,-67,73,-94,13,119,57,-76,120,66,82,95,23,-60,36,-2,122,-112,40,-35,74,-20,-69,-83,-41,-39,-75,65,-75,90,-108,19,89,-47,-56,-83,124,9,-67,81,43,76,-102,96,123,-85,46,0,-6,-101,-99,55,-77,108,-122,44,-37,-49},
			{39,-120,59,-60,25,37,91,27,25,46,-6,49,61,-45,92,112,-104,27,-113,102,18,-123,25,-45,-26,15,-41,-22,-39,31,71,-77,10,92,112,1,75,-6,71,84,-88,-91,-6,-32,-126,73,98,51,6,-85,-73,-2,91,-93,17,66,-48,-83,97,-16,113,73,85,40},
			{3,-48,51,108,-72,-52,98,-56,-37,118,22,-117,-124,30,-79,-68,-96,68,108,-106,16,76,-78,90,2,-33,107,35,-100,60,41,-68,-60,-19,94,36,-25,-117,3,-71,-59,-68,62,105,2,46,-122,-24,-71,-35,103,-10,-60,120,12,-69,90,44,59,-108,-71,-25,113,-66},
			{-87,55,33,-86,-107,64,-82,-125,-68,-101,72,68,34,3,15,-22,26,69,-24,23,-70,-27,92,53,45,-29,-38,87,63,68,-80,-30,-93,-106,72,14,-87,-109,-82,50,-45,-95,-91,-10,40,38,16,-12,13,-91,-50,12,17,87,1,-62,94,120,-80,104,35,65,120,117},
			{-100,109,-33,-16,-51,75,94,115,-22,-111,48,50,-45,-95,73,-86,-94,-78,-11,-97,103,-117,-107,120,86,-94,84,-28,-65,-4,10,-112,51,-7,-2,-53,65,-80,-78,-58,37,98,16,-99,-119,-43,-86,5,111,-94,-124,-99,-72,91,-46,-28,-39,-71,-27,3,42,-124,80,70},
			{76,-106,6,-8,11,-93,-2,-70,-95,-107,-5,-6,61,-99,-96,-94,88,49,-107,-124,29,-36,81,-24,35,-25,-6,96,-28,-56,-7,59,90,94,-80,-13,30,62,-4,78,-104,-27,124,-75,2,19,74,-70,-82,-16,-81,68,-10,81,-19,-71,108,85,69,-18,-113,-89,12,123},
			{-80,-37,57,-63,-40,-33,-37,-89,50,-91,41,-61,-54,-93,71,97,64,22,54,15,104,27,102,-89,-119,-94,-125,-50,122,10,-43,34,-114,51,30,-72,-91,-97,12,116,36,-67,-11,70,-63,98,-103,-40,-83,-31,114,-9,-119,55,-8,-90,23,82,-96,-91,48,-11,-117,-55},
			{93,63,-83,-46,-21,-57,-35,-116,118,-120,-112,17,18,127,-27,-123,-119,-57,52,46,63,124,-105,45,-101,-71,-53,91,44,-106,84,101,-114,-71,-26,-20,3,-107,-82,40,88,-28,-16,-27,53,44,100,104,-14,13,52,89,28,4,-113,88,29,46,50,53,97,12,116,-9},
			{-113,-117,-48,82,-104,84,-32,127,48,7,-95,28,-124,57,37,-81,-44,22,-25,-79,119,29,-13,28,125,-93,-105,62,114,-27,80,32,-94,-37,93,66,28,-67,79,-83,-29,64,65,0,-7,94,-99,127,27,-109,-67,-19,106,36,-71,17,-87,-104,2,-98,79,-67,-47,127},
			{-61,20,-106,-93,37,104,-91,69,-92,106,3,-58,-120,83,97,-47,-85,48,-101,-44,-70,-51,-46,-65,45,-11,92,-108,-123,-86,63,-50,-101,12,28,34,-103,-3,-49,45,-87,-16,-11,71,-57,104,-83,-110,-105,87,22,105,-113,-31,90,-119,-80,55,45,-22,93,91,-128,-1},
			{-80,-48,115,-85,79,-83,-1,-1,-73,-12,-14,110,-120,110,-34,52,110,-37,117,-105,-104,-93,82,83,-23,58,-114,-92,43,57,0,-69,-118,-76,28,113,-31,48,-3,98,38,80,53,-97,-16,-114,-73,80,-128,124,-114,28,-85,-17,-57,-106,80,-103,-29,65,-44,29,-19,22},
			{53,-11,117,65,80,19,81,69,-1,-41,101,81,66,69,-79,-15,72,-79,-109,-38,91,75,-101,-48,112,44,-127,12,31,63,-36,32,43,-114,61,108,-4,0,80,81,50,-109,3,80,113,-70,-117,-27,-78,-5,-96,-95,-9,82,1,124,-44,31,4,27,-90,24,-103,114},
			{63,32,-18,-67,-99,-20,50,96,-4,117,123,0,-47,66,82,-99,-121,88,34,-86,-19,1,7,52,-7,74,-80,51,36,63,-19,-92,-57,93,-60,0,-50,-50,-32,-72,-78,54,-16,1,-115,126,103,-80,3,-64,31,-37,54,-64,67,-40,-30,-7,76,111,-117,-18,9,-111},
			{-4,117,87,-60,-103,-30,60,-15,-77,29,-57,84,29,-53,113,35,61,-7,101,-8,-24,28,-26,44,-33,109,72,-64,10,-52,-24,63,-103,-29,-111,61,-30,103,46,106,5,-61,-27,34,26,108,14,-33,-90,91,62,86,2,-117,-122,71,-92,-28,-20,-36,21,-85,5,-35},
			{-46,-3,-8,75,-43,-46,90,64,37,-47,116,-41,74,-50,92,47,-55,-26,-88,-112,15,92,41,-72,79,-84,-98,-41,-113,45,54,-117,-102,-59,107,-22,-6,-7,31,30,-17,72,-18,-101,64,-113,-93,33,69,18,25,-20,-8,-27,-12,-84,58,83,12,3,54,82,127,94},
			{-26,-29,99,124,-53,-122,92,55,88,-102,-33,34,-113,100,78,81,-43,52,28,-61,-62,-51,-97,123,109,-87,-103,-120,-113,-34,21,62,72,104,-28,17,104,124,-2,80,-42,51,-13,-51,109,0,-121,9,-42,73,28,-70,-105,26,31,37,-37,-34,-24,40,102,15,110,-2},
			{116,-43,-111,-83,-84,1,98,-29,80,-80,-69,-22,73,45,78,-40,-58,-47,-15,6,-5,108,107,61,-32,48,-13,92,9,-56,-14,76,22,23,-88,-10,34,93,101,-112,-118,-59,-13,33,-20,-126,114,86,51,-61,32,113,7,73,35,27,65,19,57,94,-62,44,127,-69},
			{91,-68,-12,78,-124,121,-119,80,16,-105,-58,-86,-57,79,-33,-46,58,70,-20,58,16,55,-31,86,-38,35,39,44,109,98,81,-82,97,-82,-83,-74,94,89,54,-4,-25,73,105,124,92,42,-85,-112,-117,-106,100,103,69,-63,-122,-4,18,17,81,-2,-127,88,-45,-95},
			{-105,-28,84,-11,-57,40,6,32,-52,119,18,45,-86,-87,125,107,-1,52,112,28,52,-1,75,-60,16,112,61,114,-36,86,5,-90,38,-54,87,29,-126,88,18,126,37,-18,98,-106,71,-118,-65,-67,80,-35,60,-91,-60,-79,-83,-101,8,-124,-31,104,102,123,-119,27},
			{-72,-54,22,72,-39,71,-53,111,-10,118,93,-14,24,-5,29,-120,54,-65,-80,-117,84,33,-72,-102,-87,28,48,-65,35,7,116,-58,-113,10,51,42,-126,21,8,-18,-29,4,106,79,-63,97,-73,5,-110,-63,56,14,-107,-120,68,66,-41,57,-124,116,-47,109,-65,-106},
			{22,111,-39,-79,96,-123,77,-2,-32,73,-4,-14,-68,-25,-74,75,83,120,74,-54,-98,95,-8,-127,-23,-28,-61,19,65,-13,0,-85,93,-46,55,43,-109,-16,124,-116,-53,82,-40,-51,44,-109,5,74,-98,80,-27,-105,-99,-20,-119,-20,-49,-41,-49,11,-14,3,-98,-62},
			{-102,-59,61,74,21,-98,88,3,-42,-78,41,86,-73,-120,26,28,-81,-35,-38,-109,-66,-23,-46,-120,41,-17,-40,2,19,23,25,-123,57,-115,-40,10,-1,4,-122,-72,-127,39,-31,73,5,112,-80,103,-108,-77,91,-123,9,-46,27,83,47,-103,-95,-36,-121,-38,-22,6},
			{10,99,-122,31,86,69,53,-74,-89,-52,66,65,-111,-125,35,-55,-72,70,59,-106,-25,-40,101,114,30,-25,-32,29,-101,-37,86,-67,22,-19,-104,-111,-33,49,95,-79,-108,-69,92,85,104,-44,13,36,-49,-67,62,0,96,-30,-68,-83,11,-117,116,-77,55,3,-1,73},
		eclared in this scope	{7,-102,126,-70,-33,99,95,-38,111,-83,-107,119,86,23,-69,39,-22,89,-7,54,-115,-15,-25,110,14,3,6,-94,-88,23,110,110,-47,-50,60,27,92,-10,-36,49,-29,124,5,-89,-35,-72,-8,8,-110,-57,-107,-76,46,21,-117,20,-63,84,-69,3,-63,-118,65,-62},
			{89,92,112,-71,-127,-128,-120,70,79,102,92,-20,-4,-41,71,10,23,-102,97,4,-47,43,-7,58,-83,-87,-15,58,-34,10,-79,127,-25,127,-8,79,104,29,20,-61,-111,-128,-102,-45,63,-77,37,-103,-114,-64,-43,81,-60,26,-26,29,-7,-52,61,66,-46,-7,-72,-67},
			{54,26,51,-24,80,-27,7,-5,50,-108,96,-2,3,31,-117,124,19,-77,-9,-29,-120,101,57,-119,44,-96,117,8,-10,-54,121,-72,124,-38,-7,-68,110,-59,-104,-37,109,-110,-3,-10,-108,-77,-60,86,-49,47,-97,-121,-51,111,49,17,51,42,14,73,2,45,16,-45},
			{26,28,106,115,23,68,-48,3,-81,-96,32,39,124,-48,-25,83,87,-64,-71,5,-64,98,-21,-68,-96,45,61,64,-59,110,-84,75,-33,85,-37,-128,97,-23,105,-27,-104,-16,-45,-10,122,-45,96,-117,127,-2,94,40,-20,38,74,-56,106,0,-23,-90,-46,20,72,-12},
			{-104,100,-63,-62,42,-63,94,-68,-28,-88,39,3,-35,-43,-44,-45,5,81,-78,-96,-128,17,6,-36,15,91,-27,-16,-120,116,-60,66,-31,54,35,111,43,121,-103,-111,-69,52,-86,35,-42,121,73,-58,-41,-62,103,36,57,88,60,-46,72,-81,117,-44,-21,-13,-74,60},
			{-84,102,65,77,4,51,-17,5,-11,-74,-38,26,5,71,-55,31,70,28,-82,68,-72,69,-28,-94,85,90,24,-74,77,113,-22,-46,28,-60,81,-19,94,105,-42,-21,-118,-9,-82,-11,-126,-21,59,43,-97,112,116,-65,-63,-73,106,-82,-9,107,-88,79,-57,94,95,-20},
			{39,-110,15,0,-8,-50,-100,23,118,-113,-70,-125,-113,-100,112,-102,-5,44,58,-2,79,40,-74,-12,74,97,-5,-21,68,33,-123,11,122,47,-82,-5,-60,122,-46,-38,-118,99,-100,11,-96,91,41,118,111,-32,-23,23,-54,2,2,-113,104,76,17,-16,108,-54,15,-71},
			{104,6,99,59,77,42,88,15,76,36,-19,32,126,-79,63,-33,-28,116,-92,-4,0,-22,70,86,-85,61,-14,-56,-33,-74,103,-110,21,-80,-69,104,105,-54,124,-26,104,-60,58,117,122,-32,-8,-11,30,83,-84,44,-83,72,53,-25,-87,4,23,-108,89,-114,-7,-26},
			{-18,15,65,-118,33,-89,71,72,53,-51,-84,-110,52,-57,2,-102,-8,56,-98,-41,-22,-10,-86,18,-15,-2,-82,-20,-58,36,-17,-108,-84,-18,-113,125,-87,30,-14,99,69,13,17,-39,-89,-23,110,85,99,23,-4,-88,-89,119,-107,124,84,113,91,-107,72,-111,47,-105},
			{-124,-113,15,29,-67,-14,112,18,-95,-78,-44,-53,91,104,86,-107,-8,-63,-71,110,-104,-62,-123,-27,-76,-89,-39,84,-28,-88,-36,41,19,46,84,-32,-100,127,-128,37,-69,-83,-13,-64,58,33,26,95,-49,-6,37,-15,75,112,112,-30,-73,48,102,62,18,108,42,-81},
			{-47,-28,82,96,22,32,105,-94,-53,42,-51,53,-22,-74,-126,-29,-82,33,11,-81,-78,6,-25,-116,102,24,2,-47,-1,79,-29,71,-91,96,-113,-123,116,-22,-8,-106,57,-112,-100,-42,101,-114,7,-84,65,45,85,2,69,76,-97,-61,-12,-18,22,-29,-60,60,-87,102},
			{72,79,46,-66,121,-38,-31,78,88,113,58,43,-60,-97,110,60,-98,-75,82,104,73,75,-50,-5,-82,106,104,57,-31,55,-90,114,64,68,64,17,-87,-124,-58,-101,-96,48,96,107,13,116,-16,115,-96,-77,-78,-9,-18,111,55,107,-73,-128,90,-104,33,-18,112,-10},
			{113,-106,87,-83,-84,7,-82,-25,49,10,42,64,-16,101,-17,-98,3,-83,-101,-123,-66,-32,-73,87,-37,109,-111,75,25,111,-92,-39,-26,-80,-107,69,-116,43,-45,38,-107,-128,19,45,115,-66,-119,114,69,-4,-61,-49,89,-102,91,54,-107,-81,-116,-22,-99,112,52,37},
			{-18,43,-32,-90,13,-126,-28,57,-121,15,-81,-8,-89,-11,62,26,51,108,-120,31,-60,101,-69,7,89,57,33,-59,25,35,-97,-23,113,91,-127,-108,113,-107,-61,41,-117,-45,2,-97,-84,-38,-36,21,-55,27,-113,-35,-30,95,94,-85,114,51,32,-36,-113,-119,117,66},
			{23,-25,81,-16,-100,117,76,-65,83,108,-59,-84,122,-50,-14,-81,-109,-84,117,49,-30,45,-97,77,-80,-65,-80,-42,-52,-127,-86,35,100,-16,18,-78,-70,-84,100,-84,-27,71,-16,-23,-23,-122,79,-3,88,29,-28,74,-68,62,79,-55,-91,-114,73,-65,-89,-69,112,-24},
			{6,-95,27,-32,-74,-51,98,14,72,29,-68,34,68,127,109,102,81,51,-98,-7,76,76,-56,-9,77,-106,75,127,40,42,-9,-103,1,45,-14,126,39,-121,-97,35,-113,-96,5,59,-22,-128,-37,58,24,-63,19,59,98,86,-90,-48,62,-112,-30,-26,-19,115,99,110},
			{-21,-85,7,-76,-74,-101,-7,111,-94,109,3,107,-27,76,67,123,-85,-77,125,101,84,84,10,-70,-73,-102,-115,61,-22,14,-113,41,62,-110,90,87,77,44,-125,-51,46,-110,-48,77,-117,104,13,-124,-27,45,11,-21,-79,-105,6,95,-46,109,34,-17,117,123,49,-80},
			{-74,-114,-24,-9,-52,121,96,-11,118,73,67,57,50,-56,35,93,-108,-87,-95,-66,34,67,77,15,-120,62,55,-56,98,-19,-25,-8,34,113,-42,-35,-58,-66,7,-65,-67,-24,18,18,89,-69,-29,120,-101,-21,-119,-117,-82,46,66,10,119,-103,114,93,75,-16,119,88},
			{-52,64,-57,-50,-109,-52,-37,124,0,-113,-42,59,124,-67,-44,-128,14,-16,44,-100,-70,123,-103,3,66,-69,17,-32,73,-50,123,-38,66,80,91,-62,-128,121,-88,17,64,-63,-51,11,-103,-42,110,-16,-20,103,63,-64,122,98,-92,79,41,-12,87,-66,26,67,-33,-110},
			{88,-46,48,-48,-31,-61,-115,35,-122,109,-99,-5,-60,75,-33,95,125,66,105,41,5,82,46,30,-118,-19,52,-32,-95,17,-3,57,-18,-52,-121,-89,93,4,110,-46,-49,-53,115,-45,-99,61,-10,-45,14,56,23,-9,-25,32,99,0,2,-95,-119,-14,75,-3,73,-95},
			{-84,42,-111,-55,122,-85,86,-107,112,7,64,60,65,-54,40,-21,-62,-77,82,-68,16,-88,107,-58,-74,-78,-13,-120,-8,52,27,103,69,-75,84,-52,33,84,94,62,23,45,106,-113,-19,-39,-89,-72,9,71,-117,-43,-126,26,22,30,45,-94,-50,29,-27,-94,119,-9},
			{68,82,-76,-52,-104,122,-100,105,-87,-44,16,-94,-70,-25,82,-10,-32,-3,118,101,-40,27,-73,-126,-49,-49,-93,-109,8,52,-109,9,30,-22,-100,16,-70,18,63,-99,62,52,90,-37,13,126,104,-96,-69,-2,89,-71,-108,-5,-92,6,-62,-47,107,-75,-81,-34,96,-49},
			{113,15,26,-25,-6,-100,6,-36,67,112,-81,58,-50,21,-115,62,-76,-98,73,7,18,99,66,-54,11,26,-72,112,55,33,-74,5,3,36,31,-2,-123,52,-126,-101,99,-18,100,126,-23,123,-35,11,-20,19,97,-68,-56,41,120,24,48,-14,-48,106,-23,-79,-42,-122},
			{40,-104,33,-82,-45,30,83,-69,-125,12,-30,127,98,-98,89,-92,-97,40,19,27,14,31,113,36,109,125,-9,27,-11,-74,-70,41,-68,-99,62,-123,-110,-79,122,38,105,73,122,-110,3,-60,31,-88,19,14,-22,-24,31,91,97,-104,8,56,87,50,31,-50,-27,86},
			{60,-72,101,-103,41,-106,80,-75,-10,70,108,-14,102,14,77,-60,2,101,-50,20,101,66,-121,-11,122,1,40,-51,-53,-38,120,81,10,-113,-55,89,-110,93,-116,-14,4,31,6,-42,-35,-95,-127,109,79,101,63,-73,-31,9,-64,-25,32,54,41,-107,-35,52,73,-30},
			{44,-7,-62,117,89,-128,109,-63,103,18,-40,-100,89,-82,-63,55,12,35,126,-66,73,0,79,33,15,75,75,-34,72,-124,-100,60,84,92,104,-99,-123,91,-51,-31,-105,46,-119,56,49,120,-31,-69,-12,75,21,27,127,-11,-124,-74,-22,30,-51,-40,-28,77,-81,-73},
			{-82,106,-112,-101,-84,16,-34,0,23,-48,-105,63,-116,-56,115,-71,52,-115,23,53,93,86,97,-50,-90,7,-125,76,20,28,114,-61,-127,27,-79,73,-36,86,58,-40,-84,-6,80,4,-80,-47,37,117,-84,77,30,53,-36,-46,0,-69,-31,42,80,26,3,-63,80,-83},
			{13,72,-102,-50,-63,-30,-14,-83,9,95,49,-73,-127,-17,118,-27,85,51,37,76,35,-81,53,107,61,-51,4,-11,-127,109,-67,54,-37,-74,-66,54,-97,8,-109,11,32,-11,127,-51,20,-80,91,46,24,72,-116,29,11,-28,-69,102,-39,-103,-87,110,-95,-48,-51,82},
			{-48,-12,80,-2,-96,-40,-119,-100,56,-93,28,110,-46,88,115,-13,111,-36,96,-11,89,88,-84,74,-1,-46,38,-25,49,20,127,40,-70,-74,-39,34,60,-96,94,111,-94,-33,-27,79,-76,-27,37,93,-102,-45,122,103,-4,-53,-100,63,115,-76,-9,18,-84,63,-50,-38},
			{-17,109,-18,127,69,-19,89,-91,-89,98,28,28,91,22,105,77,-38,-94,-64,-8,26,-111,103,-98,88,103,110,3,122,50,-37,51,-40,-118,52,-83,-107,61,-124,106,-63,72,78,48,-26,3,44,72,74,-57,-20,-22,55,-127,78,-66,-106,-112,-57,-119,-126,-71,31,7},
			{-4,-55,106,11,103,-105,94,21,55,4,-65,73,-25,49,-127,-73,-73,17,1,80,-117,-14,43,-26,112,105,47,86,54,-40,-69,-93,63,-59,-14,10,125,-64,45,36,127,-14,48,-45,-5,-89,-44,67,102,36,107,69,104,-46,114,-75,-12,102,50,116,46,-98,44,-89},
			{12,-79,127,41,-6,-96,100,25,-3,52,0,-106,-29,-44,-119,-100,-70,-75,-124,-5,71,14,-40,103,-62,41,34,3,39,-94,22,-95,-78,56,74,-109,-94,-59,-71,11,126,-3,-124,-9,-37,-94,41,61,104,50,124,-103,-14,84,69,-102,-56,-89,124,70,50,-57,-23,-53},
			{-10,-23,30,-61,118,-36,-66,-122,49,45,31,-2,99,-112,-88,-71,-89,113,-117,-108,18,35,-11,-120,59,29,-118,95,-4,92,1,-76,-120,-90,89,-108,64,-123,54,-15,-126,38,-88,-113,-117,57,85,8,85,70,-71,-111,-113,-47,-10,-6,-56,29,52,-125,58,110,46,-37},
			{71,-49,-39,-121,-93,-59,-99,36,-110,28,30,-4,69,-107,-51,42,-119,53,121,-33,0,-127,-66,-97,35,14,-103,46,19,-84,-70,-52,-127,16,-119,-71,113,-42,16,-106,-6,-112,-5,41,24,-121,45,-91,84,-13,1,23,49,-94,-47,96,-83,-73,94,61,-74,-63,-61,-116},
			{-86,-46,48,-72,32,-128,-37,106,-91,-106,76,-58,-44,9,85,-13,-46,-123,-117,-116,-1,97,87,-86,-99,-37,-20,-67,-55,-66,-42,106,-83,-101,-128,89,25,-45,92,-71,92,-123,50,125,110,56,-110,43,110,-73,-117,-26,-12,-21,105,-115,68,-88,126,74,70,119,75,-54},
			{-6,-64,126,-56,-54,2,53,-11,-76,107,122,-39,13,-22,-117,-31,-117,72,-112,65,58,-67,-81,25,88,-68,-43,79,-27,77,90,-34,-1,53,51,103,-116,21,77,-124,110,6,-50,-14,-34,91,-63,-86,-35,-127,-117,19,92,126,93,112,-99,85,-77,-76,35,81,72,-79},
			{2,-95,1,-109,-105,-94,44,65,68,-17,-49,-52,-14,46,103,-49,35,-8,-100,-110,-16,23,-65,109,38,-1,-51,117,41,-53,111,105,-80,-21,39,-51,47,47,77,-15,28,124,44,-20,100,24,36,-13,8,86,111,-7,-71,-79,-111,-47,84,65,84,57,6,94,-70,111},
			{4,-22,-74,-117,-106,73,-13,91,-52,75,-116,-119,25,8,-89,6,14,-2,8,-27,-23,24,-72,-34,103,121,-111,119,-50,74,-26,-12,-91,-73,12,12,-70,-66,75,2,77,-52,95,-37,-109,29,22,84,-37,-94,0,68,103,-42,-120,-17,5,9,-35,46,-72,-114,121,-90},
			{109,5,-75,-111,-120,119,61,-67,-33,27,-10,3,-15,-95,40,-122,-128,101,12,-104,-71,52,72,18,119,83,-34,121,73,-65,23,78,11,24,11,12,27,108,-26,112,-65,-57,120,62,-108,31,91,72,55,-31,-56,-8,46,48,-71,47,-95,43,90,-27,9,-118,38,54},
			{-10,68,-119,33,-119,22,114,61,-21,-42,-59,51,53,-121,70,52,113,48,90,100,-83,43,99,45,17,-63,-110,-88,31,-67,-31,-51,-10,-111,7,-78,72,-35,102,68,69,-119,-82,102,-68,127,-62,122,69,8,-24,20,-78,22,12,-1,-98,90,127,83,19,-51,66,-114}
	};
*/


double computeMean(vector<double> v){
	double s=0;
	for (double d:v)
		s+=d;
	s=s/(double)v.size();
	return s;
}

double computeStdDev(vector<double> v){
	double m=computeMean(v);
	double s=0;
	for (double d:v)
		s+=pow(d-m,2);
	s=s/((double)v.size()-1);
	return sqrt(s);
}

double computeMedian(vector<double>::const_iterator begin,
              vector<double>::const_iterator end) {
    int len = end - begin;
    auto it = begin + len / 2;
    double m = *it;
    if ((len % 2) == 0) m = (m + *(--it)) / 2;
    return m;
}

tuple<double, double, double> computeQuartiles(const vector<double>& v) {
    auto it_second_half = v.cbegin() + v.size() / 2;
    auto it_first_half = it_second_half;
    if ((v.size() % 2) == 0) --it_first_half;

    double q1 = computeMedian(v.begin(), it_first_half);
    double q2 = computeMedian(v.begin(), v.end());
    double q3 = computeMedian(it_second_half, v.end());
    return make_tuple(q1, q2, q3);
}


tuple<vector<double>,vector<double>> removeOutliers(const vector<double>& v,double range_lb,double range_ub){
	vector<double> no_outliers_v;
	vector<double> outliers_v;
	for (double d:v){
		if (d < range_lb || d> range_ub)
			outliers_v.push_back(d);
		else
			no_outliers_v.push_back(d);
	}

	return make_tuple(no_outliers_v,outliers_v);

}



void testRandomGenerator(){

		//Code to generate a random key
		/*
		SecureRandom sr= new SecureRandom();
		byte[] key=sr.generateSeed(32);
		for (int i=0;i<key.length;i++)
			System.out.println("key["+i+"]="+key[i] +";");
		System.out.println();*/
		u8 *key=new u8[32];
		key[0]=-19;
		key[1]=-51;
		key[2]=92;
		key[3]=-12;
		key[4]=-51;
		key[5]=-48;
		key[6]=79;
		key[7]=14;
		key[8]=-123;
		key[9]=57;
		key[10]=26;
		key[11]=77;
		key[12]=-88;
		key[13]=43;
		key[14]=-35;
		key[15]=-107;
		key[16]=68;
		key[17]=-25;
		key[18]=-67;
		key[19]=-31;
		key[20]=-31;
		key[21]=-107;
		key[22]=-19;
		key[23]=-48;
		key[24]=39;
		key[25]=-18;
		key[26]=109;
		key[27]=-49;
		key[28]=122;
		key[29]=-119;
		key[30]=-72;
		key[31]=8;

		int numberOfValues=10000000;
		int numberOfIterations=100;
		int maximumValue=255;
		int nonce=4;
		double meanTime=0;
		std::chrono::time_point<std::chrono::system_clock> startTime,endTime;

		for (int iter=0;iter<numberOfIterations;iter++){
			startTime=std::chrono::system_clock::now();
			RandomGenerator random(4096,key, nonce);  //costruttore di uso generale
			//Salsa20RNG random=new Salsa20RNG(256,key, nonce,maximumValue,30,90);  //costruttore che sarà invocato nell'SG-index

			int *randomValues=new int[numberOfValues];

			for (int i=0;i<numberOfValues;i++){
				int v=random.nextInt(maximumValue);
				randomValues[i]=v;
			}

			endTime=std::chrono::system_clock::now();
			double totalTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();

			/*
			//Verifica di accesso random ai valori generati
			int startValue=90;
			random=new Salsa20RNG(512,key, nonce,maximumValue,startValue);
			//Random random = new Random(12748349345096L);

			int testValue=random.nextInt();
			if (testValue !=randomValues[startValue])
				System.out.println("ERRORE!");

            */
			/*
			TreeMap<Integer,Integer> histogram=new TreeMap<Integer,Integer>();
			for (int i=0;i<numberOfValues;i++){
				//System.out.println(number);
				Integer f=histogram.get(randomValues[i]);
				if (f==null)
					f=0;
				f++;
				histogram.put(randomValues[i],f);
			}




			Iterator<Entry<Integer,Integer>> it=histogram.entrySet().iterator();
			while (it.hasNext()){
				Entry<Integer,Integer> e=it.next();
				System.out.println(e);
			}

			*/
			meanTime+=totalTime;
		}
		meanTime=meanTime/numberOfIterations;
		double ms=(meanTime/1000000.0);
		//System.out.println("Numero di iterazioni di Salsa20: "+random.getSalsa20Iterations());
		cout << "Tempo medio di generazione:" << ms << "ms";
}



/*
void testOverflow(){
	int a=10;

	int d=-2147483648;

	int m=a%d;


	a=1567543000;
	int b=900435678;
	int c=a+b;

	m=c%d;
	cout << m << endl;

	int64_t d2=2147483647+1;
	m=((int64_t)a + (int64_t)b)%d2;
	cout << m << endl;
}
*/


/*
void testMemoryMappedFiles(){

    string filename="/work/phd/bmcArticle/data/indexes/single_genome_k4_bs4096_mr2.efm";

	ifstream inFile;
	size_t size = 0;
	startTime=std::chrono::system_clock::now();
	inFile.open(filename, ios::in|ios::binary|ios::ate);

	if(inFile.is_open()) {

	char* oData = 0;

		size = inFile.tellg();
		inFile.seekg(0, ios::beg);

		oData = new char[size+1];
		inFile.read(oData, size);
		oData[size] = '\0';
	}
	endTime=std::chrono::system_clock::now();
	double totalTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
	inFile.close();
}
*/

void testBitWriteAndRead(){
	Bookmark *b;
	 FileBitWriter* bw=new FileBitWriter("/tmp/prova.bin");
	 bw->open();
	 for (int i=0;i<16;i++)
		 bw->write(1,1);
	 bw->write(1,0);
	 bw->write(1,1);
	 bw->write(1,1);

	 bw->write(9,251);
	 bw->write(6,63);
	 bw->write(10,78);

	 int64_t s=10000000;

	 for (int64_t i=0;i<s;i++)
	 	 bw->writeInt64(i);

     /*
	 bw->writeInt64(927740);
	 bw->write(10,175);
	 bw->write(10,128);
	 bw->write(1,1);
	 bw->write(54,33736604);
	 bw->write(3,7);
	 bw->flush();
	 bw->write(10,128);
	 bw->write(31,75000000);
	 bw->write(54,1801439851000000-1);  //2^54-1
	 */


	 bw->close();


	 uint64_t size;

	 std::chrono::time_point<std::chrono::system_clock> startTime,endTime;
	 startTime=std::chrono::system_clock::now();
	 char *data=MemoryBitReader::loadDataFromFile("/tmp/prova.bin",size);
	 MemoryBitReader* br=new MemoryBitReader(data,size);
	 br->open();
	 int32_t v;
	 for (int i=0;i<9;i++)
	 		 v=br->read(1);
	 br->gotoNextByteStart();
	 v=br->read(1);
	 v=br->read(1);
	 v=br->read(1);

	 v=br->read(9);
	 v=br->read(6);
	 v=br->read(10);

	 for (int64_t i=0;i<s;i++){
	 	 int64_t ri=br->getInt64();
	 	 if (ri!=i){
	 		 cout << i << endl;
	 		 cout <<ri <<endl;
	 		 throw runtime_error("Errore");
	 	 }
	 }

	 endTime=std::chrono::system_clock::now();
     double totalTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
     cout << "totalTime: "<< totalTime <<endl;

     int64_t abs=0;
     b=new Bookmark(abs);
     br->gotoBookmark(b);
     v=br->read(9);
     b=new Bookmark(9);
     v=br->read(6);
     b=new Bookmark(15);
     v=br->read(10);
     for (int64_t i=0;i<s;i++){
     	 	 int64_t ri=br->getInt64();
     	 	 if (ri!=i){
     	 		 cout << i << endl;
     	 		 cout <<ri <<endl;
     	 		 throw runtime_error("Errore");
     	 	 }
     }
	 br->close();


	 startTime=std::chrono::system_clock::now();
	 FileBitReader* fr=new FileBitReader("/tmp/prova.bin");
	 fr->open();

	 v=fr->read(9);
	 v=fr->read(6);
	 v=fr->read(10);

	 for (int64_t i=0;i<s;i++){
		 int64_t ri=fr->getInt64();
		 if (ri!=i)
			 throw runtime_error("Errore di lettura");
	 }

	 endTime=std::chrono::system_clock::now();
	 totalTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
	 cout << "totalTime: "<< totalTime <<endl;
	 abs=0;
	 b=new Bookmark(abs);
	 fr->gotoBookmark(b);
	 v=fr->read(9);
	 b=new Bookmark(9);
	 fr->gotoBookmark(b);
	 v=fr->read(6);
	 b=new Bookmark(15);
	 fr->gotoBookmark(b);
	 v=fr->read(10);
	 for (int64_t i=0;i<s;i++){
			 int64_t ri=fr->getInt64();
			 if (ri!=i)
				 throw runtime_error("Errore di lettura");
	 }

	 fr->close();

}





/*
void testBuildChr20(){
	 int k=5;
	 int mrp=2;
	 int bs=8192;
	 int keyIndex=1;
	  //Build the index
	 EFMIndex *index=new EFMIndex();
	 index->setComputeStatistics(true);
	 index->setSuperAlphabetOrder(k);
	 index->setEncryptionKey(encryptionKeys[keyIndex]);
	 index->setMarkedRowsPercentage(mrp);
	 index->setBucketSize(bs);
	 index->setSuperBucketSize(bs*16);

	 string sequenceFileName="/work/phd/progettoRicerca/dati/articolo/hs37d5_chr20.fa";
	 string indexFileName="/work/phd/progettoRicerca/dati/1000genomes/efmdb/indexes/hs37d5_chr20.efm";

	 string buffer=Utils::loadFasta(sequenceFileName);
	 index->build(buffer,indexFileName);
	 Statistics *stats=index->getStatistics();
	 cout << stats->compressionRatio << endl;

	 delete index;
}

*/
/*
void testSeqanLibrary(){
	seqan::SeqFileIn seqFileIn("/work/phd/progettoRicerca/dati/1000genomes/reference/hs37d5_chr12.fa");
	seqan::StringSet<seqan::CharString> ids;
	seqan::StringSet<seqan::IupacString> seqs;
	seqan::readRecords(ids, seqs, seqFileIn);
	for (unsigned i = 0; i < length(seqs); ++i)
	        cout << length(seqs[i]) << endl;
}
*/
/*
void testBuildSingle(string &sequenceFileName,string &indexFileName,int k,int mrp,int bs,int keyIndex){
	  //Build the index
	 EFMIndex *index=new EFMIndex();
	 index->setComputeStatistics(true);
	 index->setSuperAlphabetOrder(k);
	 index->setEncryptionKey(encryptionKeys[keyIndex]);
	 index->setMarkedRowsPercentage(mrp);
	 index->setBucketSize(bs);
	 index->setSuperBucketSize(bs*16);

	 string buffer=Utils::loadFasta(sequenceFileName);
	 //cout << buffer.size() << endl;
	 index->build(buffer,indexFileName);
	 Statistics *stats=index->getStatistics();
	 cout << "Compression ratio: " << stats->compressionRatio << endl;
	 cout << "Super-alphabet build time (ms):" <<stats->superAlphabetBuildTime << endl;
	 cout << "Super-text build time (ms):" << stats->superTextBuildTime << endl;
	 cout << "Sort time (ms):" << stats->sortTime << endl;
	 cout << "Index structure build time (ms):" << stats->indexStructureBuildTime << endl;
	 cout << "Index save time (ms):" << stats->indexSaveTime << endl;
	 delete index;
}

*/

/*
void testLocate(){
	int keyIndex=1;
	string pattern="TTAAATGCGGCCGAC";
	string indexFileName="/work/phd/progettoRicerca/articolo/testV3/securityAnalysis/E.coli.efm";
	//Test::executePatternSearch(encryptionKeys[keyIndex],pattern,indexFileName, true);
	Test::executePatternSearch(encryptionKeys[keyIndex],pattern,indexFileName, true);
}
*/

/*
void testLocateChr20(){
	int keyIndex=1;
	string pattern="CAGATAAAATAATTGTTTAAGTGGAAAATCACAAGGTGTCTACAAAAATG";
	string indexFileName="/work/phd/progettoRicerca/dati/1000genomes/efmdb/indexes/hs37d5_chr20.efm";
	//Test::executePatternSearch(encryptionKeys[keyIndex],pattern,indexFileName, true);
	Test::executePatternSearch(encryptionKeys[keyIndex],pattern,indexFileName, false);
}
*/

void testMTF(){
	uint32_t as=15;
	BalancedTreeMTFList *mtf=new BalancedTreeMTFList(as);


	/*
	DoublyLinkedMTFList *mtf=new DoublyLinkedMTFList(5);
	ListNode **nodeByRef=new ListNode*;

	//ArrayMTFList *mtf=new ArrayMTFList(5);
	mtf->dumpList();
	int pos=mtf->indexOf(3,nodeByRef);
	mtf->moveToFront(*nodeByRef);
	mtf->dumpList();
	cout << endl;
	pos=mtf->indexOf(4,nodeByRef);
	mtf->moveToFront(*nodeByRef);
	mtf->dumpList();
	cout << endl;
	pos=mtf->indexOf(4,nodeByRef);
	if (pos>0)
		mtf->moveToFront(*nodeByRef);
	mtf->dumpList();
	cout << endl;

	delete nodeByRef;
	*/
}



void build(string &fastaFilePath,string &indexFilePath,string &encryptionKeyFilePath,
		uint8_t k,uint32_t bucketSize,uint8_t mrp,uint32_t *numberOfThreads){

	//testMTF();


	std::chrono::time_point<std::chrono::system_clock> startTime,endTime;
	startTime=std::chrono::system_clock::now();

	EFMCollection *efm=new EFMCollection();
	efm->setSuperAlphabetOrder(k);
	efm->setBucketSize(bucketSize);
	efm->setSuperBucketSize(bucketSize*16);
	efm->setMarkedRowsPercentage((uint8_t)mrp);
	efm->setEncryptionKeyFilePath(encryptionKeyFilePath);
	efm->setComputeStatistics(true);
	if (numberOfThreads!=NULL)
		efm->setNumberOfThreads(*numberOfThreads);
	cout << "Number of threads: " << efm->getNumberOfThreads() << endl;

	efm->build(fastaFilePath,indexFilePath);
	endTime=std::chrono::system_clock::now();
	double buildTime=std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count()/double(1000);
	cout << endl;
	cout <<  "STATISTICS"<<endl;
	cout <<  "-----------------------------------------------"<<endl;
	Statistics *stats=efm->getStatistics();
	cout <<  "Compression ratio: " << stats->compressionRatio << endl;
	cout <<  "Index statistics: " <<endl;
	cout <<  "\tText length: "<<stats->originalTextLength <<endl;
	cout <<  "\tText length (in the extended alphabet): "<<stats->textLength <<endl;
	cout <<  "\tNumber of superblocks: "<<stats->superbuckets <<endl;
	cout <<  "\tNumber of blocks: "<<stats->buckets <<endl;
    cout <<  "\tNumber of distinct alphabet symbols in collection items: "<< efm->getOriginalSymbols().size()-2 <<endl;
    cout <<  "\tNumber of marked rows: "<<stats->numberOfMarkedRows <<endl;
    cout <<  "\tExtended alphabet's order (k) :" << (uint32_t) efm->getSuperAlphabet()->getOrder() <<endl;
	cout <<  "\tExtended alphabet size: "<<stats->alphabetSize <<endl;
	cout <<  "\tCompact alphabet size: "<<stats->compactAlphabetSize <<endl;
	cout <<  "\tHeader bitmap size: "<<stats->headerBitmapSize <<endl;
	cout <<  "\tHeader occurrences table size: "<<stats->headerOccurrencesTableSize <<endl;
	cout <<  "\tHeader marked rows table size: "<<stats->headerMarkedRowsTableSize <<endl;

	cout <<  "\tSuperblocks size: "<<efm->getSuperBucketSize() <<endl;
	cout <<  "\tSuperblocks alphabet average size: "<<stats->superbucketAlphabetAverageSize <<endl;
	cout <<  "\tSuperblocks bitmap average size: "<<stats->superbucketBitmapAverageSize <<endl;
	cout <<  "\tSuperblocks occurrences table average size: "<<stats->superbucketOccurrencesTableAverageSize <<endl;

	cout <<  "\tBlocks size: "<< efm->getBucketSize() <<endl;
	cout <<  "\tBlocks average compressed size: "<< stats->bucketAverageCompressedLength <<endl;
	cout <<  "\tBlocks alphabet average size: "<<stats->bucketAlphabetAverageSize <<endl;
	cout <<  "\tAverage number of Bits per character: "<< (uint32_t)Utils::int_log2(stats->bucketAlphabetAverageSize) <<endl;
	cout <<  "\tBlocks bitmap average size: "<<stats->bucketBitmapAverageSize <<endl;
	cout <<  "\tBlocks occurrences table average size: "<<stats->bucketOccurrencesTableAverageSize <<endl;
	cout <<  "\tBlocks average number of marked rows: "<<stats->bucketAverageNumberOfMarkedRows <<endl;
	cout <<  "\tBlocks average marked rows array size: "<<stats->bucketMarkedRowsArrayAverageSize <<endl;


	cout <<  "Build times: " << buildTime << " ms" << endl;
	cout <<  "\tSuper-alphabet build time: "<<stats->superAlphabetBuildTime <<endl;
	cout <<  "\tSuper-text build time: "<<stats->superTextBuildTime <<endl;
	cout <<  "\tSort time: "<<stats->sortTime <<endl;
	cout <<  "\tBWT (from sorted suffixes) computation time: "<< stats->bwtComputationTime <<endl;
	cout <<  "\tIndex structure build time: " << stats->indexStructureBuildTime << endl;
	cout <<  "\tIndex buckets encoding time: " << stats->bucketEncodingTime << endl;
	cout <<  "\tIndex save time: " << stats->indexSaveTime << endl;
	delete efm;
}


bool executePatternMatching;
bool patternMatchingCompleted;
bool indexClosingInProgress;
vector<bool> terminatedPatternMatching;
vector<bool> notifiedCompletion;
std::condition_variable executePatternMatchingCV;
std::mutex executePatternMatchingMutex;
std::mutex coutMutex;

std::vector<std::thread*> workerThreads;



bool allWorkersFinished(){
	int i=0;
	int nt=workerThreads.size();
	bool finished=true;
	while (i<nt && finished){
		finished = finished && terminatedPatternMatching[i];
		i++;
	}
	return finished;
}

bool allWorkersNotified(){
	int i=0;
	int nt=workerThreads.size();
	bool allNotified=true;
	while (i<nt && allNotified){
		allNotified = allNotified && notifiedCompletion[i];
		i++;
	}
	return allNotified;
}

class Worker {
		public:
			int threadNumber;

			Worker(int threadNumber){
				this->threadNumber=threadNumber;
			};

			void run(){
				std::chrono::time_point<std::chrono::system_clock> currentTime;
				std::time_t printableTime;
				coutMutex.lock();
				currentTime=std::chrono::system_clock::now();
				printableTime= std::chrono::system_clock::to_time_t(currentTime);
				char mbstr[100];
				std::strftime(mbstr, sizeof(mbstr), "%H:%M:%S", std::localtime(&printableTime));
				std::cout << "worker thread " << threadNumber << " starting at " << mbstr <<endl;
				coutMutex.unlock();

				bool localIndexClosingInProgress;
				do{
					{
					//acquire work
					std::unique_lock<std::mutex> lk(executePatternMatchingMutex);
					executePatternMatchingCV.wait(lk, []{
							return executePatternMatching || indexClosingInProgress;
					     });
					localIndexClosingInProgress=indexClosingInProgress;
					}



					coutMutex.lock();
					currentTime=std::chrono::system_clock::now();
					printableTime= std::chrono::system_clock::to_time_t(currentTime);
					std::cout << "worker thread " << threadNumber << " wake up at " << ctime(&printableTime);
					coutMutex.unlock();

					if (localIndexClosingInProgress){
						coutMutex.lock();
						cout << "WORKER THREAD " << threadNumber << " terminates at " << ctime(&printableTime);
						coutMutex.unlock();

					} else{
						coutMutex.lock();
						std::cout << "worker thread " << threadNumber << " execute pattern matching at " << ctime(&printableTime);
						coutMutex.unlock();
						//simulate work
						int sum=0;
						for (int i=0;i<10000;i++)
							sum++;
						//notify the end of work
						executePatternMatchingMutex.lock();
						currentTime=std::chrono::system_clock::now();
						printableTime= std::chrono::system_clock::to_time_t(currentTime);
						coutMutex.lock();
						cout << "WORKER THREAD " << threadNumber << " ended its work at " << ctime(&printableTime);
						coutMutex.unlock();
						terminatedPatternMatching[threadNumber]=true;
						executePatternMatchingMutex.unlock();
						executePatternMatchingCV.notify_all();

						//wait until all worker threads finish their work
						{
							std::unique_lock<std::mutex> lk(executePatternMatchingMutex);
							executePatternMatchingCV.wait(lk, []{
									return patternMatchingCompleted;});
							coutMutex.lock();
							cout << "WORKER THREAD " << threadNumber << " received pattern matching completion signal at " << ctime(&printableTime);
							coutMutex.unlock();
							notifiedCompletion[threadNumber]=true;
						}
						executePatternMatchingCV.notify_all();

					}

				} while (!localIndexClosingInProgress);
			}
		};


std::vector<Worker*> workers;






void testConditionVariables(){
	std::chrono::time_point<std::chrono::system_clock> currentTime;
	std::time_t printableTime;

	int64_t nt = std::thread::hardware_concurrency(); //Allocate as many threads as the number of the microprocessor's cores to use
	executePatternMatching=false;
	indexClosingInProgress=false;
	patternMatchingCompleted=false;

	//create worker threads
	currentTime=std::chrono::system_clock::now();
    printableTime= std::chrono::system_clock::to_time_t(currentTime);
	coutMutex.lock();
	std::cout << "main() creates worker threads at " << ctime(&printableTime);
	coutMutex.unlock();
	for (int i=0;i<nt;i++){
			Worker* worker=new Worker(i);
			workers.push_back(worker);
			workerThreads.push_back(new std::thread(&Worker::run, worker));
	}

	sleep(1);
	for (int i=0;i<10000;i++){
		cout << "ITERATION " << (i+1) << endl;
		currentTime=std::chrono::system_clock::now();
	    printableTime= std::chrono::system_clock::to_time_t(currentTime);
		coutMutex.lock();
		std::cout << "main() activates worker threads at " << ctime(&printableTime);
		coutMutex.unlock();
		//signals the worker threads to start pattern matching
		{
			std::lock_guard<std::mutex> lk(executePatternMatchingMutex);
			terminatedPatternMatching.resize(nt);
			notifiedCompletion.resize(nt);
			for (unsigned int i=0;i<nt;i++){
				terminatedPatternMatching[i]=false;
				notifiedCompletion[i]=false;
			}
			executePatternMatching=true;
			indexClosingInProgress=false;
			patternMatchingCompleted=false;
		}
		executePatternMatchingCV.notify_all();

		//wait until worker threads finish their work
		{
			std::unique_lock<std::mutex> lk(executePatternMatchingMutex);
		    executePatternMatchingCV.wait(lk, []{
		    		return allWorkersFinished();});

		    executePatternMatching=false;
		    indexClosingInProgress=false;
		    patternMatchingCompleted=true;
		}
		//signals to all the worker threads that pattern matching has been completed
		executePatternMatchingCV.notify_all();

		//wait until all worker threads have been notified of pattern matching completion
		{
			std::unique_lock<std::mutex> lk(executePatternMatchingMutex);
			executePatternMatchingCV.wait(lk, []{
					return allWorkersNotified();});

			patternMatchingCompleted=false;
		}

	}


	//signals the worker threads to terminate (index is closing)
	{
		std::lock_guard<std::mutex> lk(executePatternMatchingMutex);
	    indexClosingInProgress=true;
	}

	currentTime=std::chrono::system_clock::now();
	printableTime= std::chrono::system_clock::to_time_t(currentTime);
	coutMutex.lock();
	std::cout << "main() terminates worker threads at " << ctime(&printableTime);
	coutMutex.unlock();
	executePatternMatchingCV.notify_all();

	for (int i = 0; i < nt; i++)
	   workerThreads[i]->join();

	currentTime=std::chrono::system_clock::now();
	printableTime= std::chrono::system_clock::to_time_t(currentTime);
	cout << "All worker threads terminated at " << ctime(&printableTime);
	cout << endl;



}


void locate(string &indexFilePath,string &encryptionKeyFilePath,string &patternsFilePath,string &resultsFilePath,string &statisticsFilePath,bool &retrieveSequencesDescription,uint32_t *numberOfThreads){
	//testBitWriteAndRead();

    ifstream patternsFile(patternsFilePath);
    string pattern;
	if (patternsFile.is_open()){
		EFMCollection *indexHandler=new EFMCollection();
		indexHandler->setEncryptionKeyFilePath(encryptionKeyFilePath);
		if (numberOfThreads!=NULL)
			indexHandler->setNumberOfThreads(*numberOfThreads);
		std::chrono::time_point<std::chrono::system_clock> startTime=std::chrono::system_clock::now();
		indexHandler->load(indexFilePath);
		//indexHandler->readText();  //TODO: REMOVE: FOR TESTING PURPOSES
		std::chrono::time_point<std::chrono::system_clock> endTime=std::chrono::system_clock::now();
		double openingTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
		cout << "Index opening time: " << openingTime << "ms" << endl;


		uint8_t superAlphabetOrder=indexHandler->getSuperAlphabetOrder();
		uint8_t markedRowsPercentage=indexHandler->getMarkedRowsPercentage();
		uint64_t bucketSize=indexHandler->getBucketSize();



		vector<double> times;
	    vector<double> timesPerOccurrence;
		int32_t patternIndex=0;

		ofstream resultsFile;
		resultsFile.open(resultsFilePath);
		resultsFile << "Pattern" << "\t" << "sequenceIndex" << "\t" << "sequenceDescription" << "\t" << "patternPosition" << endl;

		uint64_t patternsLength=0;
		while (getline (patternsFile,pattern)){
		  for(int32_t i = 0; i < pattern.size(); i++){
			    pattern[i] = toupper(pattern[i]);

		  }
		  patternsLength+=pattern.size();
		  cout << "\tPattern " << pattern ;
		  startTime=std::chrono::system_clock::now();
		  SearchResult *results=indexHandler->search(pattern,retrieveSequencesDescription);
	      endTime=std::chrono::system_clock::now();

	      double nOccs=results->occurrences.size();
	      double elapsedTime=(double)std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count()/(double)1000;
		  times.push_back(elapsedTime);
		  if (nOccs>0){
			  double locateTimePerOccurrence=elapsedTime/nOccs;
			  timesPerOccurrence.push_back(locateTimePerOccurrence);
		  }

		  for (int64_t i=0;i<results->occurrences.size();i++)
			  resultsFile << results->pattern << "\t" << results->occurrences[i].sequenceIndex << "\t" << results->occurrences[i].sequenceDescription << "\t" << results->occurrences[i].patternPosition << endl;

		  cout << "\t Search time: " << elapsedTime << "ms" << "\t" << "occurrences: " << nOccs << "\n"  ;
	      patternIndex++;
		}
	    patternsFile.close();
	    indexHandler->close();
	    delete indexHandler;
	    indexHandler=NULL;

	    if (patternIndex>0)
	    	patternsLength=patternsLength/patternIndex;

		double m=computeMean(times);
		double d=computeStdDev(times);
		double m2;
		double d2;
		if (timesPerOccurrence.size()>0){
			m2=computeMean(timesPerOccurrence);
			d2=computeStdDev(timesPerOccurrence);
		} else{
			m2=-1;
			d2=-1;
		}


		sort(times.begin(),times.end());
		auto q=computeQuartiles(times);
		double q1=get<0>(q);
		double q3=get<2>(q);
		double iqr=q3-q1;
		double range_lb=q1-3*iqr;
		double range_ub=q3+3*iqr;


		auto t=removeOutliers(times,range_lb,range_ub);
		cout << "Number of outliers in times: " << get<1>(t).size() << "/" << times.size() << endl;
		double no_t=get<1>(t).size();
		double mno=computeMean(get<0>(t));
		double dno=computeStdDev(get<0>(t));
		double median=get<1>(q);

		double no_to=-1;
		double mno2=-1;
		double dno2=-1;
    	double median2=-1;

		if (timesPerOccurrence.size()>0){
			sort(timesPerOccurrence.begin(),timesPerOccurrence.end());
			q=computeQuartiles(timesPerOccurrence);
			q1=get<0>(q);
			q3=get<2>(q);
			iqr=q3-q1;
			range_lb=q1-3*iqr;
			range_ub=q3+3*iqr;

			t=removeOutliers(timesPerOccurrence,range_lb,range_ub);
			cout << "Number of outliers in timesPerOccurrence: " << get<1>(t).size() << "/" << times.size() << endl;
		}
		no_to=get<1>(t).size();
		mno2=computeMean(get<0>(t));
		dno2=computeStdDev(get<0>(t));
		median2=get<1>(q);

		cout << "Median of search times: " << median <<endl;
		cout << "Median of search times per occurrence: " << median2 <<endl;

		ofstream statisticsFile;
		statisticsFile.open(statisticsFilePath,std::ofstream::out | std::ofstream::app);
		int32_t length = statisticsFile.tellp();
		if (length==0){
		  statisticsFile << "indexFileName" << "," << "k" << "," << "bucketSize" << "," << "markedRowsPercentage" << "," <<  "numberOfPatterns" << "," <<  "patternsLength" << ","<< "median" << "," << "mean" << "," << "stdDev" << "," << "mean_no" << "," << "stddev_no" << "," << "numberOfOutliersInTime" <<","<< "medianPerOccurrence" << "," << "meanPerOccurrence" << "," << "stdDevPerOccurrence" << ","<< "meanPerOccurrence_no" << "," << "stdDevperOccurrrence_no" << "," << "numberOfOutliersInTimesPerOccurrence" << "," <<  "patternsFilePath" <<endl;
		}
		statisticsFile << indexFilePath << "," <<   (int32_t)superAlphabetOrder << "," <<  bucketSize << ","  << (int32_t) markedRowsPercentage << "," << patternIndex << "," << patternsLength << ","<< median << "," << m << "," << d << "," << mno << "," << dno << "," << no_t << ","<< median2 << "," << m2 << "," << d2 << ","<< mno2 << "," << dno2 << "," << no_to << "," <<patternsFilePath <<endl;
	  }
	  else throw runtime_error("Unable to open patterns file "+patternsFilePath);
}


void locatesfm(string &indexFilePath,string &patternsFilePath,string &resultsFilePath,bool &retrieveSequencesDescription){
    ifstream patternsFile(patternsFilePath);
    string pattern;
	if (patternsFile.is_open()){
		SFMCollection *indexHandler=new SFMCollection();
		std::chrono::time_point<std::chrono::system_clock> startTime=std::chrono::system_clock::now();
		indexHandler->load(indexFilePath);
		std::chrono::time_point<std::chrono::system_clock> endTime=std::chrono::system_clock::now();
		double openingTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
		cout << "Index opening time: " << openingTime << "ms" << endl;

		vector<double> times;
	    vector<double> timesPerOccurrence;
		int32_t patternIndex=0;

		ofstream resultsFile;
		resultsFile.open(resultsFilePath);
		resultsFile << "Pattern" << "\t" << "sequenceIndex" << "\t" << "sequenceDescription" << "\t" << "patternPosition" << endl;

		while (getline (patternsFile,pattern)){
		  for(int32_t i = 0; i < pattern.size(); i++)
			  pattern[i] = toupper(pattern[i]);
		  cout << "\tPattern " << pattern ;
		  startTime=std::chrono::system_clock::now();
		  SearchResult *results=indexHandler->search(pattern,retrieveSequencesDescription);
	      endTime=std::chrono::system_clock::now();

	      double nOccs=results->occurrences.size();
	      double elapsedTime=(double)std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count()/(double)1000;
		  times.push_back(elapsedTime);
		  if (nOccs>0){
			  double locateTimePerOccurrence=elapsedTime/nOccs;
			  timesPerOccurrence.push_back(locateTimePerOccurrence);
		  }

		  for (int64_t i=0;i<results->occurrences.size();i++)
			  resultsFile << results->pattern << "\t" << results->occurrences[i].sequenceIndex << "\t" << results->occurrences[i].sequenceDescription << "\t" << results->occurrences[i].patternPosition << endl;

		  cout << "\t Search time: " << elapsedTime << "ms" << "\t" << "occurrences: " << nOccs << "\n"  ;
	      patternIndex++;
		}
	    patternsFile.close();
	    indexHandler->close();
	    delete indexHandler;
	    indexHandler=NULL;

		double m=computeMean(times);
		double d=computeStdDev(times);
		double m2;
		double d2;
		if (timesPerOccurrence.size()>0){
			m2=computeMean(timesPerOccurrence);
			d2=computeStdDev(timesPerOccurrence);
		} else{
			m2=-1;
			d2=-1;
		}


		sort(times.begin(),times.end());
		auto q=computeQuartiles(times);
		double q1=get<0>(q);
		double q3=get<2>(q);
		double iqr=q3-q1;
		double range_lb=q1-3*iqr;
		double range_ub=q3+3*iqr;


		auto t=removeOutliers(times,range_lb,range_ub);
		cout << "Number of outliers in times: " << get<1>(t).size() << "/" << times.size() << endl;
		double no_t=get<1>(t).size();
		double mno=computeMean(get<0>(t));
		double dno=computeStdDev(get<0>(t));
		double median=get<1>(q);

		double no_to=-1;
		double mno2=-1;
		double dno2=-1;
		double median2=-1;

		if (timesPerOccurrence.size()>0){
			sort(timesPerOccurrence.begin(),timesPerOccurrence.end());
			q=computeQuartiles(timesPerOccurrence);
			q1=get<0>(q);
			q3=get<2>(q);
			iqr=q3-q1;
			range_lb=q1-3*iqr;
			range_ub=q3+3*iqr;

			t=removeOutliers(timesPerOccurrence,range_lb,range_ub);
			cout << "Number of outliers in timesPerOccurrence: " << get<1>(t).size() << "/" << times.size() << endl;
		}
		no_to=get<1>(t).size();
		mno2=computeMean(get<0>(t));
		dno2=computeStdDev(get<0>(t));
		median2=get<1>(q);

		cout << "Median of search times: " << median <<endl;
		cout << "Median of search times per occurrence: " << median2 <<endl;

		std::cout << "------------------------------------------" << endl;
		std::cout << "indexFileName" << "," <<  "patternsFilePath" << ","<< "median" << "," << "mean" << "," << "stdDev" << "," << "mean_no" << "," << "stddev_no" << "," << "numberOfOutliersInTime" <<","<< "medianPerOccurrence" << "," << "meanPerOccurrence" << "," << "stdDevPerOccurrence" << ","<< "meanPerOccurrence_no" << "," << "stdDevperOccurrrence_no" << "," << "numberOfOutliersInTimesPerOccurrence" << endl;
		std::cout << indexFilePath << "," <<  patternsFilePath << ","<< median << "," << m << "," << d << "," << mno << "," << dno << "," << no_t << ","<< median2 << "," << m2 << "," << d2 << ","<< mno2 << "," << dno2 << "," << no_to << endl;
		std::cout << "------------------------------------------" << endl;
		std::cout << endl;
		std::cout << endl;
	  }
	  else throw runtime_error("Unable to open patterns file");
}






void extract(string &indexFilePath,string &encryptionKeyFilePath,uint32_t sequenceIndex,uint64_t startingPosition,uint64_t endingPosition,string outputFastaFilePath){
	EFMCollection *indexHandler=new EFMCollection();
	indexHandler->setEncryptionKeyFilePath(encryptionKeyFilePath);
	std::chrono::time_point<std::chrono::system_clock> startTime=std::chrono::system_clock::now();
	indexHandler->load(indexFilePath);
	//indexHandler->readText();  //TODO: REMOVE: FOR TESTING PURPOSES
	std::chrono::time_point<std::chrono::system_clock> endTime=std::chrono::system_clock::now();
	double openingTime=std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
	cout << "Index opening time: " << openingTime << "ms" << endl;

	startTime=std::chrono::system_clock::now();
	string snippet=indexHandler->extract(sequenceIndex,startingPosition,endingPosition);
	endTime=std::chrono::system_clock::now();

	double elapsedTime=(double)std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count()/(double)1000;


	string sequenceDescription=indexHandler->getDescription(sequenceIndex);

	indexHandler->close();
	delete indexHandler;
	indexHandler=NULL;

	ofstream outputFile;
	outputFile.open(outputFastaFilePath);
	outputFile << sequenceDescription << ":" << startingPosition  << "-" << endingPosition << endl;
	outputFile << snippet <<endl;
	outputFile.close();
	cout << "\t Extract time: " << elapsedTime << "ms" << endl  ;



}














/*
void testBuildSFMCollectionOld(string sequencesDirectory,int bucketSize,int mrp,int referenceId,string indexFileName){
	std::chrono::time_point<std::chrono::system_clock> startTime,endTime;
	startTime=std::chrono::system_clock::now();
	//boost::filesystem::path path(sequencesDirectory);
	//boost::filesystem::directory_iterator it(path);
	vector<string> fileNames;

	tinydir_dir dir;
	tinydir_open(&dir, sequencesDirectory.c_str());

	while (dir.has_next)
	{
		tinydir_file file;
		tinydir_readfile(&dir, &file);

		string fileName(file.name);
		string suffix="_"+to_string(referenceId) + ".fa";
		if (boost::algorithm::ends_with(fileName, suffix)){
			    	fileNames.push_back(fileName);
		}
		tinydir_next(&dir);
	}

	sort(fileNames.begin(),fileNames.end());

	SFMCollection *sfm=new SFMCollection();
	sfm->setBucketSize(bucketSize);
	sfm->setMarkedRowsPercentage(mrp);
	for (string fileName:fileNames){
		string fullPath=sequencesDirectory+"/"+ fileName;
		sfm->addSequence(fileName,fullPath);
	}
	sfm->build(indexFileName);
	delete(sfm);
	endTime=std::chrono::system_clock::now();
	double buildTime=std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count()/double(1000);
	cout <<  "Build time: " << buildTime << " ms" << endl;

}*/

void buildsfm(string &fastaFilePath,uint64_t bucketSize,uint8_t mrp,string &indexFilePath){
	std::chrono::time_point<std::chrono::system_clock> startTime,endTime;
	startTime=std::chrono::system_clock::now();
	//boost::filesystem::path path(sequencesDirectory);
	//boost::filesystem::directory_iterator it(path);


	SFMCollection *sfm=new SFMCollection();
	sfm->setBucketSize(bucketSize);
	sfm->setMarkedRowsPercentage(mrp);


	sfm->build(fastaFilePath,indexFilePath);
	delete(sfm);
	endTime=std::chrono::system_clock::now();
	double buildTime=std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime).count()/double(1000);
	cout <<  "Build time: " << buildTime << " ms" << endl;

}




/*
void testVerifyCollection(string sequencesDirectory,string indexFileName,int keyIndex,int referenceId){

	//boost::filesystem::path path(sequencesDirectory);
	//boost::filesystem::directory_iterator it(path);
	vector<string> fileNames;

	tinydir_dir dir;
	tinydir_open(&dir, sequencesDirectory.c_str());

	while (dir.has_next)
	{
		tinydir_file file;
		tinydir_readfile(&dir, &file);

		string fileName(file.name);
		string suffix="_"+to_string(referenceId) + ".fa";
		if (boost::algorithm::ends_with(fileName, suffix)){
			    	fileNames.push_back(fileName);
		}
		tinydir_next(&dir);
	}

	sort(fileNames.begin(),fileNames.end());

	EFMCollection *indexHandler=new EFMCollection();

	indexHandler->setEncryptionKey(encryptionKeys[keyIndex]);
	indexHandler->load(indexFileName);

	int i=0;
	for (string fileName:fileNames){
		string fullPath=sequencesDirectory+"/"+ fileName;
		string sequence=Utils::loadFasta(fullPath);
		string sequenceFromIndex=indexHandler->getSequence(i);
		cout << "Sequence " << i << "(" << indexHandler->getDescription(i)<< ")" <<": ";
		if (sequence == sequenceFromIndex)
			cout << "OK" << endl;
		else{
			cout << sequenceFromIndex.length() << endl;
			cout << sequence.length() << endl;

			//for (int j=0;j<sequence.length();j++)
			for (int j=sequence.length()-1;j>=0;j--)
				if (sequence[j]!=sequenceFromIndex[j]){
					cout << "ERROR at " << j << endl;
					break;
				}
		}
		i++;
	}
}
*/

void concatenate(string sequencesDirectory,int referenceId,string concatenationFilePath){
	vector<string> fileNames;
	tinydir_dir dir;
	tinydir_open(&dir, sequencesDirectory.c_str());

	while (dir.has_next)
	{
		tinydir_file file;
		tinydir_readfile(&dir, &file);

		string fileName(file.name);
		string suffix="_"+to_string(referenceId) + ".fa";
		if (boost::algorithm::ends_with(fileName, suffix)){
			    	fileNames.push_back(fileName);
		}
		tinydir_next(&dir);
	}

	sort(fileNames.begin(),fileNames.end());

	string buffer;
	cout << "Loading sequences in memory" <<endl;
	stringstream ssText;
	stringstream ssHeaders;
	string terminator( 1,'&');
	string sequence;
	for (uint32_t i=0;i<fileNames.size();i++){
		cout << fileNames[i] << endl;
		 sequence=Utils::loadFasta(sequencesDirectory + "/"+fileNames[i]);
		 ssText << sequence;
		 ssText << terminator;
	}
	cout << "\tloaded " << size << " sequences" <<endl;
	buffer=ssText.str();
	cout << "\tconcatenated size:" << buffer.size() <<endl;

	ofstream csvFile;
	csvFile.open(concatenationFilePath);

	csvFile << buffer;

	csvFile.close();

}



void testTinyDir(){
	tinydir_dir dir;
	tinydir_open(&dir, "/work/phd/progettoRicerca/dati/1000genomes/sequences");

	while (dir.has_next)
	{
	    tinydir_file file;
	    tinydir_readfile(&dir, &file);

	    printf("%s", file.name);
	    tinydir_next(&dir);
	}
}








vector<int64_t> naiveSearch(string &sequence, string pattern){
	vector<int64_t> results;
	string::size_type pos = sequence.find(pattern);
	while(pos != std::string::npos){
		results.push_back(pos);
		pos = sequence.find(pattern,pos+1);
	}
	return results;
}


void clearFileSystemCache(){
	   //int exitValue=std::system("/bin/bash -c \"echo laetitia| sudo -S sh -c 'echo 1 > /proc/sys/vm/drop_caches'\"");
	   int exitValue=std::system("/bin/bash -c \"echo fernando| sudo -S sh -c 'echo 1 > /proc/sys/vm/drop_caches'\"");
	   if (exitValue>0)
		   throw runtime_error("Errore nella pulizia della cache del filesystem");
}






int main(int argc, char* argv[]) {
  try{

	cout << "+--------------------------------------------------------+"<<endl;
	cout << "|                   EFMCollection                        |"<<endl;
	cout << "+--------------------------------------------------------+"<<endl;
	cout << "|  Compressed and Encrypted Genomic collections indexer  |"<<endl;
	cout << "+--------------------------------------------------------+"<<endl;
	cout <<endl;


	if (argc<2){
		cout << "At least the command parameter is needed" << endl;
		cout <<"Valid (case-sensitive) commands are: " <<endl;
		cout<< "\tbuild, locate, extract, generatekey, concatenate, buildsfm, locatesfm. "<<endl;
		exit(1);
	}
	string command=argv[1];
	if (command=="generatekey"){
		if (argc < 3){
			cout << "The following parameter is needed for the generatekey command:" << endl;
			cout << "1) Path of the key file to build" << endl;
		}
		string keyFileName=argv[2];
		EncryptionManager::generateKeyFile(keyFileName);
		EncryptionManager man(keyFileName);

		cout << "Key file " << keyFileName << " successfully generated" << endl;

	} else if (command=="build"){
			if (argc < 7){
				cout << "The following parameters are needed for the build command:" << endl;
				cout << "1) Path of the FASTA file containing the sequence collection" << endl;
				cout << "2) Output encrypted index file path" << endl;
				cout << "3) Encryption key file path" << endl;
				cout << "4) Extended alphabet order (k)" << endl;
				cout << "5) Bucket size (bs)" << endl;
				cout << "6) Marked rows percentage (mrp)" << endl;
				cout << "7) Number of concurrent threads (default: hardware concurrency)" << endl;
				exit(1);
			}
			string fastaFilePath=argv[2];
			string indexFilePath=argv[3];
			string encryptionKeyFilePath=argv[4];
			uint8_t k=stoi(argv[5]);
			uint64_t bs=stoi(argv[6]);
			uint8_t mrp=stoi(argv[7]);

			uint32_t *numberOfThreads=NULL;
			if (argc==9){
				numberOfThreads=new uint32_t;
				*numberOfThreads=stoi(argv[8]);
			}

			build(fastaFilePath,indexFilePath,encryptionKeyFilePath,k,bs,mrp,numberOfThreads);
	} else if (command=="locate"){
			if (argc < 5){
					cout << "The following parameters are needed to execute the locate command:" << endl;
					cout << "1) Index file path" << endl;
					cout << "2) Encryption key file path" << endl;
					cout << "3) Patterns file path (a text file containing a pattern for each line)" << endl;
					cout << "4) Results file path (a text file that will contain a line for each pattern match)" << endl;
					cout << "5) Statistics file path (a text file that will contain statistics for the overall locate operation)" << endl;
					cout << "6) Y if you want to retrieve the matching sequences description, N otherwise (default: Y)" << endl;
					cout << "7) Number of concurrent threads (default: min(hardware concurrency,super alphabet order))" << endl;
					exit(1);
			}
			bool retrieveSequencesDescription=true;
			if (argc>=8){
				string rsd=argv[7];
				if (rsd=="N" || rsd=="n")
					retrieveSequencesDescription=false;
			}
			uint32_t *numberOfThreads=NULL;
			if (argc==9){
				numberOfThreads=new uint32_t;
				*numberOfThreads=stoi(argv[8]);
			}
			string indexFilePath=argv[2];
			string encryptionKeyFilePath=argv[3];
			string patternsFilePath=argv[4];
			string resultsFilePath=argv[5];
			string statisticsFilePath=argv[6];
			locate(indexFilePath,encryptionKeyFilePath,patternsFilePath,resultsFilePath,statisticsFilePath,retrieveSequencesDescription,numberOfThreads);

	} else if (command=="extract"){
		if (argc < 8){
				cout << "The following parameters are needed to execute the extract command:" << endl;
				cout << "1) Index file path" << endl;
				cout << "2) Encryption key file path" << endl;
				cout << "3) Sequence index" << endl;
				cout << "4) Starting position (0-based)" << endl;
				cout << "5) Ending position (0-based)" << endl;
				cout << "6) Output FASTA file path" << endl;

				exit(1);
		}
		string indexFilePath=argv[2];
		string encryptionKeyFilePath=argv[3];
		uint32_t si=stoi(argv[4]);
		uint64_t sp=stoi(argv[5]);
		uint64_t ep=stoi(argv[6]);
		string outputFastaFilePath=argv[7];

		extract(indexFilePath,encryptionKeyFilePath,si,sp,ep,outputFastaFilePath);

	} else if (command=="buildsfm"){
		if (argc < 6){
			cout << "The following parameters are needed for the buildsfm command:" << endl;
			cout << "1) fasta file path" << endl;
			cout << "2) bucket size (bs)" << endl;
			cout << "3) marked rows percentage (mrp)" << endl;
			cout << "4) index file path" << endl;
			exit(1);
		}
		string fastaFilePath=argv[2];
		int bs=stoi(argv[3]);
		int mrp=stoi(argv[4]);
		string indexFilePath=argv[5];
		buildsfm(fastaFilePath,bs,mrp,indexFilePath);

	}  else if (command=="locatesfm"){
		if (argc < 5){
			cout << "The following parameters are needed to execute the locatesfm command:" << endl;
			cout << "1) Index file path" << endl;
			cout << "2) Patterns file path (a text file containing a pattern for each line)" << endl;
			cout << "3) Results file path (a text file that will contain a line for each pattern match)" << endl;
			exit(1);
		}
		bool retrieveSequencesDescription=false;
		string indexFilePath=argv[2];
		string patternsFilePath=argv[3];
		string resultsFilePath=argv[4];

		locatesfm(indexFilePath,patternsFilePath,resultsFilePath,retrieveSequencesDescription);


	}  else if (command=="concatenate"){
		if (argc < 5){
			cout << "The following parameters are needed for the concatenate command:" << endl;
			cout << "1) sequences directory" << endl;
			cout << "2) chromosomes pair identifier(a number like 20 or 1)" << endl;
			cout << "3) concatenation file path" << endl;
			exit(1);
		}
		string sequencesDirectory=argv[2];
		string pair=argv[3];
		string concatenationFilePath=argv[4];
		concatenate(sequencesDirectory,stoi(pair),concatenationFilePath);
	} else {
		cout << command << ": unknown command" <<endl;
		cout <<"Valid (case-sensitive) commands are: " <<endl;
		cout<< "\tbuild, locate, extract, generatekey, concatenate, buildsfm, locatesfm. "<<endl;
		exit(1);
	}


  } catch( const std::exception & ex ) {
	  cerr << ex.what() << endl;
  }




}
