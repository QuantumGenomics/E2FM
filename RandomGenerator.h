/*
 * RandomGenerator.h
 *
 *  Created on: 20/dic/2014
 *      Author: fernando
 */

#ifndef RANDOMGENERATOR_H_
#define RANDOMGENERATOR_H_

#include <stdint.h>
#include "ecrypt-sync.h"
#define STATE_SIZE 16

namespace std {

class RandomGenerator {
public:
	RandomGenerator(uint32_t keyStreamBufferSize,u8 *key, uint64_t nonce);
	RandomGenerator(uint32_t keyStreamBufferSize,u8 *key);
	virtual ~RandomGenerator();
	uint32_t nextInt();
	uint32_t nextInt(uint32_t n);
	uint64_t nextInt64(uint32_t n);
	void populateKeyStreamBuffer(uint64_t nonce, uint32_t maxValue,uint64_t startValuePosition, uint64_t endValuePosition);
private:
	uint32_t next(const uint32_t n);
	uint8_t extractByteFromKeyStreamBuffer();
	void populateKeyStreamBuffer(uint32_t bytesToGenerate);
	void intToBigEndian(uint32_t n, uint8_t *bs);
	void gotoBlockOffset(uint32_t startValueBlockOffset);
	void ECRYPT_ctrsetup(const u8 *ctr);

	ECRYPT_ctx *ecrypt_ctx;
	uint32_t bitsBuffer; 	    //current byte of the keyStream buffer: it's the
								//byte from which the next bit will be extracted
	uint32_t generatedBytes;  		//number of populated bytes in the KeyStreamBufferSize (effective size of the key stream buffer)
	uint32_t liveBytes;			//number of not yet used bytes in the keyStreamBuffer
	uint32_t liveBits;				//number of not yet used bits in the bits buffer
	uint32_t maxValue;        		//Maximum random value returned from nextInt()
	uint32_t bitsToExtract;   		//Number of bits to extract for each int value(computed respect to maxValue)
	uint32_t keyStreamBufferSize;  //Size of the key stream buffer size: it conditions the number of bytes generated by
							  //a single invocation of populateKeyStreamBuffer

	uint32_t startValuePosition;   //Start position whithin the keystream of the first int value generated when calling the nextInt() method

	u8  *key;
	uint64_t nonce; //nonce (used as initialization vector)
	uint32_t counter; //counter
	u8	*keyStreamBuffer; // buffer containing the generated keyStream



};

} /* namespace std */

#endif /* RANDOMGENERATOR_H_ */
